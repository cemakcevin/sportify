[{"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/index.js":"1","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/App.js":"2","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/pages/LoginPage/LoginPage.js":"3","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/Header/Header.js":"4","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/pages/SearchPage/SearchPage.js":"5","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/Input/Input.js":"6","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/TeamDetails/TeamDetails.js":"7","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/EventScore/EventScore.js":"8","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/functions/dateToString.js":"9","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/VideoBox/VideoBox.js":"10","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/CommentForm/CommentForm.js":"11","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/ProfileImage/ProfileImage.js":"12","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/Comment/Comment.js":"13","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/functions/timeDifference.js":"14","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/NewsArticle/NewsArticle.js":"15","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/functions/videoWatchToEmbed.js":"16","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/VideoMain/VideoMain.js":"17","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/VideoInfo/VideoInfo.js":"18","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/Avatar/Avatar.js":"19","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/TeamCard/TeamCard.js":"20","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/pages/UserPage/UserPage.js":"21","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/IsFriend/IsFriend.js":"22","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/SocialButton/SocialButton.js":"23","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/FeedForm/FeedForm.js":"24","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/FeedCard/FeedCard.js":"25","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/FeedCardForm/FeedCardForm.js":"26","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/ContentActions/ContentActions.js":"27","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/ContentShare/ContentShare.js":"28","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/FeedCardComment/FeedCardComment.js":"29","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/functions/getTeamNames.js":"30","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/pages/GamePage/GamePage.js":"31","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/Loading/Loading.js":"32","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/functions/sortCommentsAscending.js":"33","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/functions/sortCommentsDescending.js":"34"},{"size":221,"mtime":1623335395415,"results":"35","hashOfConfig":"36"},{"size":3017,"mtime":1624625537869,"results":"37","hashOfConfig":"36"},{"size":1430,"mtime":1623850600805,"results":"38","hashOfConfig":"36"},{"size":2064,"mtime":1624453693277,"results":"39","hashOfConfig":"36"},{"size":3187,"mtime":1624580517669,"results":"40","hashOfConfig":"36"},{"size":885,"mtime":1624234034476,"results":"41","hashOfConfig":"36"},{"size":11771,"mtime":1624845625187,"results":"42","hashOfConfig":"36"},{"size":990,"mtime":1623674189905,"results":"43","hashOfConfig":"36"},{"size":377,"mtime":1623673468511,"results":"44","hashOfConfig":"36"},{"size":711,"mtime":1624581169102,"results":"45","hashOfConfig":"36"},{"size":1360,"mtime":1624035075704,"results":"46","hashOfConfig":"36"},{"size":239,"mtime":1624213481243,"results":"47","hashOfConfig":"36"},{"size":1029,"mtime":1624192517881,"results":"48","hashOfConfig":"36"},{"size":1722,"mtime":1623705365996,"results":"49","hashOfConfig":"36"},{"size":583,"mtime":1624577783367,"results":"50","hashOfConfig":"36"},{"size":374,"mtime":1623762587065,"results":"51","hashOfConfig":"36"},{"size":574,"mtime":1624581157701,"results":"52","hashOfConfig":"36"},{"size":3228,"mtime":1624577899816,"results":"53","hashOfConfig":"36"},{"size":249,"mtime":1623793096562,"results":"54","hashOfConfig":"36"},{"size":328,"mtime":1623882112102,"results":"55","hashOfConfig":"36"},{"size":35607,"mtime":1624844055215,"results":"56","hashOfConfig":"36"},{"size":2008,"mtime":1624195130375,"results":"57","hashOfConfig":"36"},{"size":696,"mtime":1624190745012,"results":"58","hashOfConfig":"36"},{"size":1408,"mtime":1624222363252,"results":"59","hashOfConfig":"36"},{"size":3144,"mtime":1624580229292,"results":"60","hashOfConfig":"36"},{"size":1937,"mtime":1624287786181,"results":"61","hashOfConfig":"36"},{"size":1045,"mtime":1624229254270,"results":"62","hashOfConfig":"36"},{"size":3151,"mtime":1624276440192,"results":"63","hashOfConfig":"36"},{"size":1133,"mtime":1624285381861,"results":"64","hashOfConfig":"36"},{"size":362,"mtime":1624381762062,"results":"65","hashOfConfig":"36"},{"size":12128,"mtime":1624843603974,"results":"66","hashOfConfig":"36"},{"size":204,"mtime":1624625504185,"results":"67","hashOfConfig":"36"},{"size":189,"mtime":1624843168062,"results":"68","hashOfConfig":"36"},{"size":191,"mtime":1624843225388,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"1iqy524",{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"72"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"72"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"72"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"72"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/index.js",[],["144","145"],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/App.js",[],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/pages/LoginPage/LoginPage.js",[],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/Header/Header.js",[],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/pages/SearchPage/SearchPage.js",[],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/Input/Input.js",[],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/TeamDetails/TeamDetails.js",[],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/EventScore/EventScore.js",[],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/functions/dateToString.js",[],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/VideoBox/VideoBox.js",[],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/CommentForm/CommentForm.js",["146"],"import \"./CommentForm.scss\";\n\nimport ProfileImage from '../ProfileImage/ProfileImage';\n\nfunction CommentForm ({className, onSubmit, profileUrl}) {\n\n    return (\n        <form className={`${className} form`} onSubmit={onSubmit}>\n            <div className=\"form__avatar-container\">\n                <ProfileImage \n                    className=\"form__profile-image\"\n                    imgSrc={profileUrl}\n                />\n            </div>\n            <div className=\"form__container\">\n                <label className=\"form__title\" htmlFor=\"input\">JOIN THE CONVERSATION</label>\n                <div className=\"form__input-box\">\n                    <div className=\"form__input-container\">\n                        <textarea \n                            className=\"form__input\" \n                            id=\"input\"\n                            name=\"input\" \n                            type=\"text\"\n                            placeholder=\"Add a comment...\"\n                            name=\"comment\"\n                        >\n                        </textarea>\n                    </div>\n                    <div className=\"form__button-container\">\n                        <button className=\"form__button\" type=\"submit\">SUBMIT</button>\n                    </div>\n                </div>\n            </div>\n        </form>\n    )\n}\n\nexport default CommentForm;","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/ProfileImage/ProfileImage.js",[],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/Comment/Comment.js",[],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/functions/timeDifference.js",[],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/NewsArticle/NewsArticle.js",[],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/functions/videoWatchToEmbed.js",[],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/VideoMain/VideoMain.js",[],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/VideoInfo/VideoInfo.js",[],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/Avatar/Avatar.js",[],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/TeamCard/TeamCard.js",[],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/pages/UserPage/UserPage.js",["147","148"],"import './UserPage.scss';\nimport React from 'react';\nimport axios from 'axios';\nimport {Link} from 'react-router-dom';\nimport io from 'socket.io-client';\n\nimport Avatar from '../../components/Avatar/Avatar';\nimport TeamCard from '../../components/TeamCard/TeamCard';\nimport TeamDetails from '../../components/TeamDetails/TeamDetails';\nimport EventScore from '../../components/EventScore/EventScore';\nimport NewsArticle from '../../components/NewsArticle/NewsArticle';\nimport ProfileImage from '../../components/ProfileImage/ProfileImage';\nimport IsFriend from '../../components/IsFriend/IsFriend';\nimport FeedForm from '../../components/FeedForm/FeedForm';\nimport FeedCard from '../../components/FeedCard/FeedCard';\n\nimport lockIcon from '../../assets/icons/lock-icon.png';\nimport homeIcon from '../../assets/icons/home-icon.png';\nimport locationIcon from '../../assets/icons/location-icon.png';\n\nimport timeDifference from '../../functions/timeDifference';\nimport sortCommentsAscending from '../../functions/sortCommentsAscending';\nimport sortCommentsDescending from '../../functions/sortCommentsDescending';\n\n\nconst API__KEY=\"dd7ed4159ce8b1df6d8cbadaa67c7cdf\";\nconst localUrl = \"http://localhost:8686\";\nlet socket;\n\n\nclass UserPage extends React.Component {\n\n\n    state = {\n        index: 0,\n        favouriteTeams:[],\n        selectedTeam: null,\n        detailsEnabled: false,\n        pastEvents: [],\n        articles: [],\n        currentUser: {},\n        profileInfo: {},\n        currentIsProfile: null,\n        friends: [],\n        requests: [],\n        isFriend: null,\n        isRequestSent: false,\n        isRequestReceived: false,\n        feed: [],\n        feedComments: []\n    }\n\n    componentDidMount(prevProps, _prevState) {\n\n        const url = this.props.match.url;\n        const previousUrl = prevProps && prevProps.match.url;\n\n        if(url !== previousUrl) {\n            this.props.taskUpdateUrl(this.props.match.url);\n        }\n\n        const token = sessionStorage.getItem(\"token\");\n        let userId = this.props.match.params.userId;\n\n        socket = io.connect(localUrl);\n\n        if(!userId) {\n\n            socket.on(\"feedPostUpdate\", () => {\n                axios.get(localUrl + \"/feed/currentUser\", {headers: {Authorization: `Bearer ${token}`}})\n                .then(response => {\n                    \n                    this.setState({\n                        feed: response.data\n                    })\n                })\n            });\n\n            socket.on(\"feedPostCommentUpdate\", () => {\n                axios.get(localUrl + \"/comments/feedComments/currentUser\", {headers: {Authorization: `Bearer ${token}`}})\n                .then(response => {\n                    \n                    this.setState({\n                        feedComments: response.data\n                    })\n                })\n            });\n\n            socket.on(\"friendRequestUpdate\", () => {\n                axios.get(localUrl + \"/requests\", {headers: {Authorization: `Bearer ${token}`}})\n                .then(response => {\n\n                    this.setState({\n                        requests: response.data,\n                    })\n                })\n            });\n\n            socket.off(\"friendAcceptUpdate\");\n\n            axios.get(localUrl + \"/users\", {headers: {Authorization: `Bearer ${token}`}})\n            .then(response => {\n                \n                userId = response.data.userId;\n\n                this.setState({\n                    currentUser: response.data,\n                    profileInfo: response.data,\n                    currentIsProfile: true\n                })\n\n                return axios.all([\n                    axios.get(localUrl + \"/favourites\", {headers: {Authorization: `Bearer ${token}`}}),\n                    axios.get(localUrl + \"/friends\", {headers: {Authorization: `Bearer ${token}`}}),\n                    axios.get(localUrl + \"/requests\", {headers: {Authorization: `Bearer ${token}`}}),\n                    axios.get(localUrl + \"/feed/currentUser\", {headers: {Authorization: `Bearer ${token}`}}),\n                    axios.get(localUrl + \"/comments/feedComments/currentUser\", {headers: {Authorization: `Bearer ${token}`}})\n                ])\n            })\n            .then(axios.spread((favouritesResponse, friendsResponse, requestsResponse, feedResponse, feedCommentsResponse)=> {\n                \n                if(favouritesResponse.data){\n                    this.setState({\n                        favouriteTeams: favouritesResponse.data,\n                        friends: friendsResponse.data,\n                        requests: requestsResponse.data,\n                        feed: feedResponse.data,\n                        feedComments: feedCommentsResponse.data,\n                        isFriend: true\n                    })\n                }\n                else {\n                    this.setState({\n                        friends: friendsResponse.data,\n                        requests: requestsResponse.data,\n                        feed: feedResponse.data,\n                        feedComments: feedCommentsResponse.data,\n                        isFriend: true\n                    },() =>  console.log(\"yess\"))\n                    \n                } \n            }))\n            .catch(error => {\n                console.log(error)\n            })\n        }\n        else {\n\n            socket.on(\"feedPostUpdate\", () => {\n                axios.get(localUrl + \"/feed/\" + userId, {headers: {Authorization: `Bearer ${token}`}})\n                .then(response => {\n                    \n                    this.setState({\n                        feed: response.data\n                    })\n                })\n            });\n\n            socket.on(\"feedPostCommentUpdate\", () => {\n                axios.get(localUrl + \"/comments/feedComments/\"  + userId, {headers: {Authorization: `Bearer ${token}`}})\n                .then(response => {\n                    \n                    this.setState({\n                        feedComments: response.data\n                    })\n                })\n            });\n\n            socket.on(\"friendAcceptUpdate\", () => {\n\n                console.log(\"it is working\");\n                axios.all([\n                    axios.get(localUrl + \"/friends/isFriend/\" + userId, {headers: {Authorization: `Bearer ${token}`}}),\n                    axios.get(localUrl + \"/friends/\" + userId, {headers: {Authorization: `Bearer ${token}`}})\n                ])\n                .then(axios.spread((isFriendResponse, friendsResponse) => {\n                    console.log(isFriendResponse.data, friendsResponse.data)\n                    \n                    this.setState({\n                        isFriend: isFriendResponse.data,\n                        friends: friendsResponse.data\n                    })\n                }))\n            });\n\n            socket.off(\"friendRequestUpdate\");\n\n            axios.all([\n                axios.get(localUrl + \"/favourites/user/\" + userId, {headers: {Authorization: `Bearer ${token}`}}),\n                axios.get(localUrl + \"/users/\" + userId, {headers: {Authorization: `Bearer ${token}`}}),\n                axios.get(localUrl + \"/users\", {headers: {Authorization: `Bearer ${token}`}}),\n                axios.get(localUrl + \"/friends/\" + userId, {headers: {Authorization: `Bearer ${token}`}}),\n                axios.get(localUrl + \"/feed/\" + userId, {headers: {Authorization: `Bearer ${token}`}}),\n                axios.get(localUrl + \"/comments/feedComments/\" + userId, {headers: {Authorization: `Bearer ${token}`}})\n            ])\n            .then(axios.spread((favouritesResponse, profileResponse, currentUserResponse, \n                friendsResponse, feedResponse, feedCommentsResponse)=> {\n                if(favouritesResponse.data){\n                    this.setState({\n                        favouriteTeams: favouritesResponse.data,\n                        currentUser: currentUserResponse.data,\n                        profileInfo: profileResponse.data,\n                        currentIsProfile: false,\n                        friends: friendsResponse.data,\n                        feed: feedResponse.data,\n                        feedComments: feedCommentsResponse.data,\n                    })\n                }\n                else {\n                    this.setState({\n                        currentUser: currentUserResponse.data,\n                        profileInfo: profileResponse.data,\n                        currentIsProfile: false,\n                        friends: friendsResponse.data,\n                        feed: feedResponse.data,\n                        feedComments: feedCommentsResponse.data,\n                    })\n                    \n                } \n            \n                return axios.all([\n                    axios.get(localUrl + \"/friends/isFriend/\" + userId, {headers: {Authorization: `Bearer ${token}`}}),\n                    axios.get(localUrl + \"/requests/isRequestSent/\" + userId, {headers: {Authorization: `Bearer ${token}`}}),\n                    axios.get(localUrl + \"/requests/isRequestReceived/\" + userId, {headers: {Authorization: `Bearer ${token}`}})\n                ])\n            }))\n            .then(axios.spread((isFriendResponse, isSentResponse, isRecievedResponse) => {\n    \n                this.setState({\n                    isFriend: isFriendResponse.data.isFriend,\n                    isRequestSent: isSentResponse.data.isRequestSent,\n                    isRequestReceived: isRecievedResponse.data.isRequestReceived\n                })\n            }))\n            .catch(error => {\n                console.log(error)\n            })\n        }\n\n        \n    }\n\n    componentDidUpdate(prevProps, _prevState) {\n        \n        const url = this.props.match.url;\n        const previousUrl = prevProps && prevProps.match.url;\n\n        if(url !== previousUrl) {\n            this.props.taskUpdateUrl(this.props.match.url);\n        }\n\n        const token = sessionStorage.getItem(\"token\");\n\n        const userId = this.props.match.params.userId;\n        const prevUserId = prevProps.match.params.userId;\n\n        if(userId !== prevUserId) {\n\n            socket.off(\"feedPostUpdate\");\n            socket.off(\"feedPostCommentUpdate\");\n            socket.off(\"friendRequestUpdate\");\n            socket.off(\"friendAcceptUpdate\");\n\n            if(!userId) {\n\n                socket.on(\"feedPostUpdate\", () => {\n                \n                    axios.get(localUrl + \"/feed/currentUser\", {headers: {Authorization: `Bearer ${token}`}})\n                    .then(response => {\n                        \n                        this.setState({\n                            feed: response.data\n                        })\n                    })\n                })\n                \n                socket.on(\"feedPostCommentUpdate\", () => {\n                    axios.get(localUrl + \"/comments/feedComments/currentUser\", {headers: {Authorization: `Bearer ${token}`}})\n                    .then(response => {\n                        \n                        this.setState({\n                            feedComments: response.data\n                        })\n                    })\n                })\n\n                socket.on(\"friendRequestUpdate\", () => {\n                    axios.get(localUrl + \"/requests\", {headers: {Authorization: `Bearer ${token}`}})\n                    .then(response => {\n                        \n                        this.setState({\n                            requests: response.data\n                        })\n                    })\n                })\n    \n                axios.get(localUrl + \"/users\", {headers: {Authorization: `Bearer ${token}`}})\n                .then(response => {\n    \n                    this.setState({\n                        currentUser: response.data,\n                        profileInfo: response.data,\n                        currentIsProfile: true\n                    }, () => {\n                        console.log(this.state.currentUser)\n                    })\n    \n                    return axios.all([\n                        axios.get(localUrl + \"/favourites\", {headers: {Authorization: `Bearer ${token}`}}),\n                        axios.get(localUrl + \"/friends\", {headers: {Authorization: `Bearer ${token}`}}),\n                        axios.get(localUrl + \"/requests\", {headers: {Authorization: `Bearer ${token}`}}),\n                        axios.get(localUrl + \"/feed/currentUser\", {headers: {Authorization: `Bearer ${token}`}}),\n                        axios.get(localUrl + \"/comments/feedComments/currentUser\", {headers: {Authorization: `Bearer ${token}`}})\n                    ])\n                })\n                .then(axios.spread((favouritesResponse, friendsResponse, requestsResponse, feedResponse, feedCommentsResponse)=> {\n                    console.log(favouritesResponse, friendsResponse, feedResponse, feedCommentsResponse)\n                    if(favouritesResponse.data){\n                        this.setState({\n                            index: 0,\n                            favouriteTeams: favouritesResponse.data,\n                            friends: friendsResponse.data,\n                            requests: requestsResponse.data,\n                            feed: feedResponse.data,\n                            feedComments: feedCommentsResponse.data,\n                            isFriend: true\n                        })\n                    }\n                    else {\n                        this.setState({\n                            index:0,\n                            friends: friendsResponse.data,\n                            requests: requestsResponse.data,\n                            feed: feedResponse.data,\n                            feedComments: feedCommentsResponse.data,\n                            isFriend: true\n                        })\n                        \n                    } \n                }))\n                .catch(error => {\n                    console.log(error)\n                })\n            }\n            else {\n\n                socket.on(\"feedPostUpdate\", () => {\n                \n                    axios.get(localUrl + \"/feed/\" + userId, {headers: {Authorization: `Bearer ${token}`}})\n                    .then(response => {\n                        \n                        this.setState({\n                            feed: response.data\n                        })\n                    })\n                });\n\n                socket.on(\"feedPostCommentUpdate\", () => {\n                    axios.get(localUrl + \"/comments/feedComments/\"  + userId, {headers: {Authorization: `Bearer ${token}`}})\n                    .then(response => {\n                        \n                        this.setState({\n                            feedComments: response.data\n                        })\n                    })\n                });\n\n                socket.on(\"friendAcceptUpdate\", () => {\n                    console.log(\"it is working\");\n                    axios.all([\n                        axios.get(localUrl + \"/friends/isFriend/\" + userId, {headers: {Authorization: `Bearer ${token}`}}),\n                        axios.get(localUrl + \"/friends/\" + userId, {headers: {Authorization: `Bearer ${token}`}})\n                    ])\n                    .then(axios.spread((isFriendResponse, friendsResponse) => {\n                        console.log(isFriendResponse.data, friendsResponse.data)\n                        this.setState({\n                            isFriend: isFriendResponse.data,\n                            friends: friendsResponse.data\n                        })\n                    }))\n                });\n\n                axios.all([\n                    axios.get(localUrl + \"/favourites/user/\" + userId, {headers: {Authorization: `Bearer ${token}`}}),\n                    axios.get(localUrl + \"/users/\" + userId, {headers: {Authorization: `Bearer ${token}`}}),\n                    axios.get(localUrl + \"/users\", {headers: {Authorization: `Bearer ${token}`}}),\n                    axios.get(localUrl + \"/friends/\" + userId, {headers: {Authorization: `Bearer ${token}`}}),\n                    axios.get(localUrl + \"/feed/\" + userId, {headers: {Authorization: `Bearer ${token}`}}),\n                    axios.get(localUrl + \"/comments/feedComments/\" + userId, {headers: {Authorization: `Bearer ${token}`}})\n                ])\n                .then(axios.spread((favouritesResponse, profileResponse, currentUserResponse, \n                    friendsResponse, feedResponse, feedCommentsResponse)=> {\n                    if(favouritesResponse.data){\n                        this.setState({\n                            index: 0,\n                            favouriteTeams: favouritesResponse.data,\n                            currentUser: currentUserResponse.data,\n                            profileInfo: profileResponse.data,\n                            currentIsProfile: false,\n                            friends: friendsResponse.data,\n                            feed: feedResponse.data,\n                            feedComments: feedCommentsResponse.data,\n                        })\n                    }\n                    else {\n                        this.setState({\n                            index: 0,\n                            currentUser: currentUserResponse.data,\n                            profileInfo: profileResponse.data,\n                            currentIsProfile: false,\n                            friends: friendsResponse.data,\n                            feed: feedResponse.data,\n                            feedComments: feedCommentsResponse.data,\n                        })\n                        \n                    } \n                \n                    return axios.all([\n                        axios.get(localUrl + \"/friends/isFriend/\" + userId, {headers: {Authorization: `Bearer ${token}`}}),\n                        axios.get(localUrl + \"/requests/isRequestSent/\" + userId, {headers: {Authorization: `Bearer ${token}`}}),\n                        axios.get(localUrl + \"/requests/isRequestReceived/\" + userId, {headers: {Authorization: `Bearer ${token}`}})\n                    ])\n                }))\n                .then(axios.spread((isFriendResponse, isSentResponse, isRecievedResponse) => {\n        \n                    this.setState({\n                        isFriend: isFriendResponse.data.isFriend,\n                        isRequestSent: isSentResponse.data.isRequestSent,\n                        isRequestReceived: isRecievedResponse.data.isRequestReceived\n                    })\n                }))\n                .catch(error => {\n                    console.log(error)\n                })\n            }\n        } \n        else {\n\n            const {index, favouriteTeams, pastEvents, articles} = this.state;\n\n            if(index < favouriteTeams.length) {\n\n                const teamId = favouriteTeams[index].idTeam;\n                const teamName = favouriteTeams[index].strTeam;\n\n                setTimeout(axios.all([\n                    axios.get(\"https://www.thesportsdb.com/api/v1/json/40130162/eventslast.php?id=\" + teamId),\n                    axios.get(\"https://gnews.io/api/v4/search?q=\" + teamName + \"&token=\" + API__KEY + \"&lang=en\")\n                ]).then(axios.spread((pastEventsResponse, teamNewsResponse) => {\n\n                    let newPastEvents = pastEventsResponse.data.results;\n                    let newArticles = teamNewsResponse.data.articles;\n\n                    newPastEvents = newPastEvents.map(event => {\n                        const {strHomeTeam, strAwayTeam, intHomeScore, intAwayScore, dateEvent, strVideo, strFilename} = event;\n                        return {strHomeTeam, strAwayTeam, intHomeScore, intAwayScore, dateEvent, strVideo, strFilename};\n                    })\n\n                    newArticles = newArticles.map(article => {\n                        const {title, image, url} = article;\n                        return {title, image, url};\n                    })\n                    \n                    this.setState({\n                        index: index + 1,\n                        pastEvents: [...pastEvents, ...newPastEvents],\n                        articles: [...articles, ...newArticles]\n                    })\n                })) ,2000)\n\n            }\n        }\n    }\n\n    componentWillUnmount() {\n\n        socket.off(\"feedPostUpdate\");\n        socket.off(\"feedPostCommentUpdate\");\n        socket.off(\"friendRequestUpdate\");\n        socket.off(\"friendAcceptUpdate\");\n    }\n\n    taskDisplayTeam = (teamId) => {\n        axios.get(\"https://www.thesportsdb.com/api/v1/json/40130162/lookupteam.php?id=\" + teamId)\n        .then(response => {\n            const selectedTeam = response.data.teams[0];\n\n            this.setState({\n                selectedTeam: selectedTeam,\n                detailsEnabled: true\n            })\n        })\n    }\n\n    taskEndDisplayTeam = () => {\n        \n        this.setState({\n            detailsEnabled: false\n        })\n    }\n\n    taskUpdateFavourites = () => {\n\n        const token = sessionStorage.getItem(\"token\");\n\n        axios.get(localUrl + \"/favourites\", {headers: {Authorization: `Bearer ${token}`}})\n        .then(response => {\n            \n            if(response.data){\n                this.setState({\n                    favouriteTeams: response.data\n                })\n            }\n            else {\n                this.setState({\n                    favouriteTeams: []\n                })\n            } \n\n        })\n    }\n\n    taskSendFriendRequest = () => {\n\n        const {profileInfo} = this.state;\n\n        const token = sessionStorage.getItem(\"token\");\n        const userId = profileInfo.userId;\n\n        axios.post(localUrl + '/requests', {userId}, {headers: {Authorization: `Bearer ${token}`}})\n        .then(_response => {\n            \n            this.setState({\n                isRequestSent: true\n            }, () => {\n\n                socket.emit(\"friendRequest\");\n            })\n        })\n    }\n\n    taskAcceptFriendRequest = () => {\n\n        const {profileInfo} = this.state;\n\n        const token = sessionStorage.getItem(\"token\");\n        const requestorId = profileInfo.userId;\n        \n\n        axios.post(localUrl + '/requests/acceptRequest', {requestorId}, {headers: {Authorization: `Bearer ${token}`}})\n        .then(_response => {\n\n            return axios.all([\n                axios.get(localUrl + \"/friends/\" + requestorId, {headers: {Authorization: `Bearer ${token}`}}),\n                axios.get(localUrl + \"/requests/\" + requestorId, {headers: {Authorization: `Bearer ${token}`}}),\n            ])\n            .then(axios.spread((friendsResponse, requestResponse) => {\n\n                this.setState({\n                    isFriend: true,\n                    friends: friendsResponse.data,\n                    requests: requestResponse.data\n                }, () => {\n    \n                    socket.emit(\"friendAccept\");\n                })\n\n            }))\n        })\n    }\n\n    taskAddPost = (event) => {\n\n        event.preventDefault();\n\n        const {profileInfo} = this.state;\n    \n        const token = sessionStorage.getItem(\"token\");\n\n        const commentText = event.target.commentText.value;\n        const contentType = \"comment\";\n        const userId = profileInfo.userId;\n        \n        const commentData = {\n            userId, \n            commentText, \n            contentType\n        }\n        \n        axios.post(localUrl + \"/feed\", commentData, {headers: {Authorization: `Bearer ${token}`}})\n        .then(response => {\n            this.setState({\n                feed: response.data\n            }, () => {\n                event.target.reset();\n\n                socket.emit(\"feedPost\", {feed: response.data});\n            })\n        })\n\n    }\n\n    taskAddCommentToPost = (event) => {\n\n        event.preventDefault();\n\n        const {profileInfo} = this.state;\n\n        const token = sessionStorage.getItem(\"token\");\n        const userId = profileInfo.userId;\n\n        const commentText = event.target.commentText.value;\n        const contentId = event.target.contentId.value;\n        const contentType = event.target.contentType.value;\n        const receiverId = event.target.receiverId.value;\n\n        const feedCommentData = {\n            contentId, \n            contentType, \n            commentText, \n            receiverId\n        }\n\n        axios.post(localUrl + \"/comments\", feedCommentData, {headers: {Authorization: `Bearer ${token}`}})\n        .then(_response => {\n\n            return axios.get(localUrl + \"/comments/feedComments/\" + userId, {headers: {Authorization: `Bearer ${token}`}})\n        })\n        .then(response => {\n\n            this.setState({\n                feedComments: response.data\n            }, () => {\n\n                event.target.reset();\n                socket.emit(\"feedPostComment\", {feedComments: response.data})\n            })\n        })\n    }\n\n    taskTakeToGamePage = (idEvent) => {\n\n        this.props.history.push('/game/' + idEvent);\n    }\n\n    render () {\n\n        const {favouriteTeams, selectedTeam, detailsEnabled, \n            pastEvents, articles, profileInfo, currentUser, currentIsProfile, friends, requests, isFriend, \n            isRequestSent, isRequestReceived, feed, feedComments} = this.state;\n\n            // sortCommentsDescending(feed);\n            // sortCommentsAscending(feedComments);\n\n        return(\n            <main className=\"user\">\n                <div className=\"user__profile profile\">\n                    <Avatar \n                        className=\"profile__avatar\" \n                        avatarUrl={profileInfo.imgUrl} \n                    />\n                    <div className=\"profile__info\">\n                        <h3 className=\"profile__name\">{profileInfo.name} {profileInfo.lastName}</h3>\n                        <p className=\"profile__date\">Joined {timeDifference(profileInfo.timestamp)}</p>\n                        <p className=\"profile__description\">{profileInfo.description}</p>\n                        <div className=\"profile__location-container\">\n                            <img className=\"profile__location-icon\" src={homeIcon} alt=\"location\"/>\n                            <p className=\"profile__location\">Lives in <span className=\"profile__bold\">{profileInfo.location}</span></p>\n                        </div> \n                        <div className=\"profile__location-container\">\n                            <img className=\"profile__location-icon\" src={locationIcon} alt=\"location\"/>\n                            <p className=\"profile__location\">From <span className=\"profile__bold\">{profileInfo.from}</span></p>\n                        </div>\n                        {!currentIsProfile && \n                            <div className=\"profile__info-buttons\">\n                                {isFriend === null\n                                    ?\n                                    <div></div>\n                                    :\n                                    <IsFriend \n                                        className=\"\"\n                                        isFriend={isFriend}\n                                        isRequestSent={isRequestSent}\n                                        isRequestReceived={isRequestReceived}\n                                        taskSendFriendRequest={this.taskSendFriendRequest}\n                                        taskAcceptFriendRequest={this.taskAcceptFriendRequest}\n                                    />\n                                }\n                            </div>\n                        }\n                    </div>\n                </div>\n                {isFriend === null\n                    ?\n                    <div></div>\n                    :\n                    (isFriend === true\n                        ?\n                        <div className=\"user__profile-details\">\n                            <div className=\"user__interaction interaction\">\n                                <div className=\"interaction__favourites\">\n                                    {favouriteTeams.map(team => {\n                                        return (\n                                            <TeamCard \n                                                className=\"interaction__fav-card\" \n                                                key={team.idTeam}\n                                                taskDisplayTeam={this.taskDisplayTeam}\n                                                strTeamBadge={team.strTeamBadge}\n                                                teamId={team.idTeam} \n                                            />\n                                        )\n                                    })} \n                                </div>\n                                <div className=\"interaction__feed-container\">\n                                    <div className=\"interaction__feed feed\">\n                                        <div className=\"feed__card\">\n                                            {currentIsProfile\n                                            ?\n                                            <FeedForm \n                                                className=\"feed__form\"\n                                                onSubmit={this.taskAddPost}\n                                                profileUrl={currentUser.imgUrl}\n                                                feedTitle={`${profileInfo.name}'s Feed`}\n                                                placeholder={`What is on your mind?`}\n                                            />\n                                            :\n                                            <FeedForm \n                                                className=\"feed__form\"\n                                                onSubmit={this.taskAddPost}\n                                                profileUrl={currentUser.imgUrl}\n                                                feedTitle={`${profileInfo.name}'s Feed`}\n                                                placeholder={`Write something to ${profileInfo.name}...`}\n                                            />\n                                            }\n                                        </div>\n                                        {feed.map(feedContent => {\n                                            return (\n                                                <FeedCard \n                                                    className=\"feed__card\"\n                                                    key={feedContent.feedId}\n                                                    feedContent={feedContent}\n                                                    feedComments={feedComments}\n                                                    taskTakeToGamePage={this.taskTakeToGamePage}\n                                                    taskAddCommentToPost={this.taskAddCommentToPost}\n                                                    userAvatar={currentUser.imgUrl}\n                                                />\n                                            )\n                                        })}\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"user__updates updates\">\n                                <div className=\"updates__container\">\n                                    {pastEvents.map(event => {\n                                        return <EventScore key={event.idEvent} event={event} />\n                                    })}\n                                </div>\n                                <div className=\"updates__container\">\n                                    {articles.map((article, i) => {\n                                        return (\n                                            <NewsArticle \n                                                className=\"updates__news-article\" \n                                                key={i}\n                                                newsArticle={article} \n                                            />\n                                        )\n                                    })}\n                                </div>\n                            </div>\n                            <div className=\"user__friends friends\">\n                                <div className=\"friends__wrapper\">\n                                    <div className=\"friends__container\">\n                                        <h3 className=\"friends__title\">Friends</h3>\n                                        {friends.map(friend => {\n                                            return(\n                                                <Link key={friend.friendId} to={\"/user/\" + friend.friendId}>\n                                                    <ProfileImage \n                                                        className=\"friends__avatar\"\n                                                        key={friend.friendId}\n                                                        imgSrc={friend.imgUrl}\n                                                    />\n                                                </Link>\n                                            )\n                                        })}\n                                    </div>\n                                    <div className=\"friends__request-container\">\n                                        <h3 className=\"friends__title\">Requests</h3>\n                                        {requests.map(request => {\n                                            return(\n                                                <Link key={request.requestorId} to={\"/user/\" + request.requestorId}>\n                                                    <ProfileImage \n                                                        key={request.requestorId}\n                                                        className=\"friends__avatar\"\n                                                        imgSrc={request.imgUrl}\n                                                    />\n                                                </Link>\n                                            )\n                                        })}\n                                    </div>\n                                </div>\n                            </div>\n                            {detailsEnabled && \n                                <TeamDetails \n                                    team={selectedTeam} \n                                    taskEndDisplayTeam={this.taskEndDisplayTeam}\n                                    taskUpdateFavourites={this.taskUpdateFavourites}\n                                />\n                            }\n                        </div>\n                        :\n                        <div className=\"user__private private\">\n                            <div className=\"private__wrapper\">\n                                <img className=\"private__img\" src={lockIcon} alt=\"lock\"/>\n                                <div className=\"private__card\">    \n                                    <h3 className=\"private__title\">This Account is Private</h3>\n                                    <p className=\"private__text\">Send a friend request to this account to see their details.</p>\n                                </div>\n                            </div>\n                        </div>\n                    )\n                }\n                \n                \n            </main>\n        )\n    }\n    \n}\n\nexport default UserPage;","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/IsFriend/IsFriend.js",[],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/SocialButton/SocialButton.js",[],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/FeedForm/FeedForm.js",["149"],"import \"./FeedForm.scss\";\n\nimport ProfileImage from '../ProfileImage/ProfileImage';\n\nfunction FeedForm ({className, onSubmit, profileUrl, feedTitle, placeholder}) {\n\n    return (\n        <form className={`${className} feed-form`} onSubmit={onSubmit}>\n            <div className=\"feed-form__avatar-container\">\n                <ProfileImage \n                    className=\"feed-form__profile-image\"\n                    imgSrc={profileUrl}\n                />\n            </div>\n            <div className=\"feed-form__container\">\n                <label className=\"feed-form__title\" htmlFor=\"input\">{feedTitle}</label>\n                <div className=\"feed-form__input-box\">\n                    <div className=\"feed-form__input-container\">\n                        <input \n                            className=\"feed-form__input\" \n                            id=\"input\"\n                            name=\"input\" \n                            type=\"text\"\n                            placeholder={placeholder}\n                            name=\"commentText\"\n                        >\n                        </input>\n                    </div>\n                    <div className=\"feed-form__button-container\">\n                        <button className=\"feed-form__button\" type=\"submit\">SUBMIT</button>\n                    </div>\n                </div>\n            </div>\n        </form>\n    )\n}\n\nexport default FeedForm;","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/FeedCard/FeedCard.js",[],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/FeedCardForm/FeedCardForm.js",[],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/ContentActions/ContentActions.js",[],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/ContentShare/ContentShare.js",[],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/FeedCardComment/FeedCardComment.js",[],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/functions/getTeamNames.js",[],["150","151"],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/pages/GamePage/GamePage.js",["152","153"],"import './GamePage.scss';\nimport React from 'react';\nimport axios from 'axios';\nimport io from 'socket.io-client';\n\nimport VideoMain from '../../components/VideoMain/VideoMain';\nimport VideoInfo from '../../components/VideoInfo/VideoInfo';\nimport VideoBox from '../../components/VideoBox/VideoBox';\nimport ContentShare from '../../components/ContentShare/ContentShare';\n\nimport sortCommentsAscending from '../../functions/sortCommentsAscending';\nimport sortCommentsDescending from '../../functions/sortCommentsDescending';\n\nimport videoWatchToEmbed from '../../functions/videoWatchToEmbed';\n\nconst localUrl = \"http://localhost:8686\";\nlet socket;\n\nclass GamePage extends React.Component {\n\n    state = {\n        index: 0,\n        strVideo: \"\",\n        currentEvent: {},\n        pastLeagueEvents: [],\n        videoComments:[],\n        currentUser: {},\n        videoShare: false,\n        videoSharePost: false,\n        friends: [],\n        filteredFriends: [],\n        selectedFriend: {},\n        searchedValue: \"\"\n    }\n\n    componentDidMount(prevProps, _prevState) {\n\n        const url = this.props.match.url;\n        const previousUrl = prevProps && prevProps.match.url;\n\n        if(url !== previousUrl) {\n            this.props.taskUpdateUrl(this.props.match.url);\n        }\n\n        const token = sessionStorage.getItem(\"token\");\n        const videoId = this.props.match.params.videoId;\n        \n        socket = io.connect('localhost:8686');\n        socket.on('gameCommentUpdates', ({videoComments}) => {\n        \n            axios.get(localUrl + \"/comments/game/\" + videoId, {headers: {Authorization: `Bearer ${token}`}})\n            .then(response => {\n                this.setState({\n                    videoComments: response.data\n                })\n            })\n            \n        })\n\n\n        axios.all([\n            axios.get(\"https://www.thesportsdb.com/api/v1/json/40130162/lookupevent.php?id=\" + videoId),\n            axios.get(localUrl + \"/comments/game/\" + videoId, {headers: {Authorization: `Bearer ${token}`}}),   \n            axios.get(localUrl + \"/users\", {headers: {Authorization: `Bearer ${token}`}}),\n            axios.get(localUrl + \"/friends\", {headers: {Authorization: `Bearer ${token}`}}) \n        ])\n        .then(axios.spread((responseEvent, responseComments, responseUsers, responseFriends) => {\n            \n            const currentEvent = responseEvent.data.events[0];\n            const videoComments = responseComments.data;\n            const strVideo = currentEvent.strVideo && videoWatchToEmbed(currentEvent.strVideo)\n            const leagueId = currentEvent.idLeague;\n            const currentUser = responseUsers.data;\n            const friends = responseFriends.data;\n\n            if(videoComments) {\n                this.setState({\n                    strVideo: strVideo,\n                    currentEvent: currentEvent,\n                    videoComments: videoComments,\n                    currentUser: currentUser,\n                    friends: friends,\n                    filteredFriends: friends\n                })\n            }\n            else {\n                this.setState({\n                    strVideo: strVideo,\n                    currentEvent: currentEvent,\n                    currentUser: currentUser,\n                    friends: friends,\n                    filteredFriends: friends\n                })\n            }\n            \n\n            return axios.get(\"https://www.thesportsdb.com/api/v1/json/40130162/eventspastleague.php?id=\" + leagueId)\n        }))\n        .then(response => {\n            const pastLeagueEvents = response.data.events;\n\n            this.setState({\n                pastLeagueEvents: pastLeagueEvents\n            })\n        })\n    }\n\n    componentDidUpdate(prevProps, _prevState) {\n\n        const url = this.props.match.url;\n        const previousUrl = prevProps && prevProps.match.url;\n\n        if(url !== previousUrl) {\n            this.props.taskUpdateUrl(this.props.match.url);\n        }\n\n        const videoId = this.props.match.params.videoId;\n        const prevVideoId = prevProps.match.params.videoId;\n\n        if(videoId !== prevVideoId) {\n            \n            const token = sessionStorage.getItem(\"token\");\n\n            axios.all([\n                axios.get(\"https://www.thesportsdb.com/api/v1/json/40130162/lookupevent.php?id=\" + videoId),\n                axios.get(localUrl + \"/comments/game/\" + videoId, {headers: {Authorization: `Bearer ${token}`}})   \n            ])\n            .then(axios.spread((responseEvent, responseComments) => {\n                \n                const currentEvent = responseEvent.data.events[0];\n                const videoComments = responseComments.data;\n                const strVideo = currentEvent.strVideo && videoWatchToEmbed(currentEvent.strVideo)\n                const leagueId = currentEvent.idLeague;\n    \n                if(videoComments) {\n                    this.setState({\n                        strVideo: strVideo,\n                        currentEvent: currentEvent,\n                        videoComments: videoComments\n                    })\n                }\n                else {\n                    this.setState({\n                        strVideo: strVideo,\n                        currentEvent: currentEvent,\n                    })\n                }\n                \n    \n                return axios.get(\"https://www.thesportsdb.com/api/v1/json/40130162/eventspastleague.php?id=\" + leagueId)\n            }))\n            .then(response => {\n                let pastLeagueEvents = response.data.events;\n    \n                pastLeagueEvents = pastLeagueEvents.filter(event => {\n\n                    if(event.idEvent === videoId) {\n                        return false;\n                    }\n\n                    return true;\n                })\n\n                this.setState({\n                    pastLeagueEvents: pastLeagueEvents\n                })\n            })\n        }\n\n        \n    }\n\n    componentWillUnmount() {\n        socket.off('gameCommentUpdates');\n    }\n\n    taskSubmitComment = (event) => {\n\n        event.preventDefault();\n\n        const commentText = event.target.comment.value;\n        const contentType = \"game\";\n        const contentId = this.props.match.params.videoId;\n        const token = sessionStorage.getItem(\"token\");\n\n        const commentData = {\n            contentId,\n            contentType,\n            commentText\n        }\n\n        axios.post(localUrl + \"/comments\", commentData, {headers: {Authorization: `Bearer ${token}`}})\n        .then(_response => {\n            \n            return axios.get(localUrl + \"/comments/\" + contentType + \"/\" + contentId, {headers: {Authorization: `Bearer ${token}`}})\n        })\n        .then(response => {\n\n            this.setState({\n                videoComments: response.data\n            }, () => {\n\n                socket.emit('gameComment', {videoComments: response.data});\n                \n            })\n        })\n        .catch(error => {\n            console.log(error);\n        })\n\n        event.target.reset();\n\n    }\n\n    taskChangeVideo = (videoId, _videoSrc) => {\n        this.props.history.push('/game/' + videoId)\n    }\n\n    taskShareVideo = () => {\n\n        this.setState({\n            videoShare: true\n        })\n    }\n\n    taskEnableVideoPost = (friend) => {\n        this.setState({\n            videoSharePost: true,\n            selectedFriend: friend\n        })\n    }\n\n    taskCancelVideoShare = () => {\n\n        this.setState({\n            videoShare: false,\n            videoSharePost: false\n        })\n    }\n\n    taskBackToPrevious = () => {\n        this.setState({\n            videoSharePost: false\n        })\n    }\n\n    taskFilterFriends = (event) => {\n        const {name, value} = event.target;\n        \n        \n        this.setState({\n            [name]: value\n        }, () => {\n\n            const {searchedValue, friends} = this.state;\n\n            const filteredFriends = friends.filter(friend => {\n\n                const friendName = friend.friendName.toLowerCase();\n                const searched = searchedValue.toLowerCase();\n\n                if(friendName.includes(searched)){\n                    return true;\n                }\n    \n                return false;\n            })\n\n            this.setState({\n                filteredFriends: filteredFriends\n            })\n        })\n\n        \n\n       \n    }\n\n    taskSubmitSharePost = (event) => {\n        \n        event.preventDefault();\n\n        const token = sessionStorage.getItem(\"token\");\n\n        const commentText = event.target.post.value;\n        const {currentEvent, selectedFriend} = this.state;\n\n        const VideoPostData = {\n            userId: selectedFriend.friendId,\n            commentText,\n            contentType: \"video\",\n            idEvent: currentEvent.idEvent,\n            strEvent: currentEvent.strEvent,\n            intHomeScore: currentEvent.intHomeScore,\n            intAwayScore: currentEvent.intAwayScore,\n            strVideo: currentEvent.strVideo\n        }\n\n        axios.post(localUrl + \"/feed\", VideoPostData, {headers: {Authorization: `Bearer ${token}`}})\n        .then(_response => {\n\n            event.target.reset();\n\n            const {friends} = this.state;\n\n            this.setState({\n                videoShare: false,\n                videoSharePost: false,\n                filteredFriends: friends,\n                selectedFriend: {},\n                searchedValue: \"\"\n            })\n        })\n\n    }\n\n    render () {\n\n        const {strVideo, currentEvent, pastLeagueEvents, \n            videoComments, currentUser, videoShare, videoSharePost, \n            searchedValue, filteredFriends, selectedFriend} = this.state;\n\n            // sortCommentsDescending(videoComments);\n\n        return (\n            <main className=\"game\">\n                <VideoMain \n                    className=\"game__video\"\n                    videoSrc={strVideo}\n                    videoName={currentEvent.strFilename}\n                />\n                <section className=\"game__info\">\n                    <div className=\"game__info-wrapper\">\n                        <VideoInfo \n                            className=\"game__video-info\" \n                            currentEvent={currentEvent}\n                            currentUser={currentUser}\n                            comments={videoComments}\n                            taskSubmitComment={this.taskSubmitComment}\n                            taskShareVideo={this.taskShareVideo}\n                        />\n                        <div className=\"game__side-videos-container\">\n                            {pastLeagueEvents.map(event => {\n                                return(\n                                    <VideoBox \n                                        key={event.idEvent}\n                                        className=\"game__side-video\"\n                                        videoSrc={event.strVideo} \n                                        videoName={event.strFilename}\n                                        videoId={event.idEvent}\n                                        onClick={this.taskChangeVideo}\n                                    />)\n                            })}\n                        </div>\n                    </div>\n                </section>\n                {videoShare && \n                    <ContentShare \n                        className=\"game__videoshare\"\n                        currentUser={currentUser}\n                        taskCancelContentShare={this.taskCancelVideoShare}\n                        taskFilterFriends={this.taskFilterFriends}\n                        taskBackToPrevious={this.taskBackToPrevious}\n                        taskEnableVideoPost={this.taskEnableVideoPost}\n                        taskSubmitSharePost={this.taskSubmitSharePost}\n                        videoSharePost={videoSharePost}\n                        searchedValue={searchedValue}\n                        friends={filteredFriends}\n                        selectedFriend={selectedFriend}\n                    />\n                }  \n            </main>\n        )\n    }\n}\n\nexport default GamePage;","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/Loading/Loading.js",[],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/functions/sortCommentsAscending.js",[],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/functions/sortCommentsDescending.js",[],{"ruleId":"154","replacedBy":"155"},{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","severity":1,"message":"159","line":25,"column":29,"nodeType":"160","messageId":"161","endLine":25,"endColumn":43},{"ruleId":"162","severity":1,"message":"163","line":22,"column":8,"nodeType":"164","messageId":"165","endLine":22,"endColumn":29},{"ruleId":"162","severity":1,"message":"166","line":23,"column":8,"nodeType":"164","messageId":"165","endLine":23,"endColumn":30},{"ruleId":"158","severity":1,"message":"159","line":25,"column":29,"nodeType":"160","messageId":"161","endLine":25,"endColumn":47},{"ruleId":"154","replacedBy":"167"},{"ruleId":"156","replacedBy":"168"},{"ruleId":"162","severity":1,"message":"163","line":11,"column":8,"nodeType":"164","messageId":"165","endLine":11,"endColumn":29},{"ruleId":"162","severity":1,"message":"166","line":12,"column":8,"nodeType":"164","messageId":"165","endLine":12,"endColumn":30},"no-native-reassign",["169"],"no-negated-in-lhs",["170"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","no-unused-vars","'sortCommentsAscending' is defined but never used.","Identifier","unusedVar","'sortCommentsDescending' is defined but never used.",["169"],["170"],"no-global-assign","no-unsafe-negation"]