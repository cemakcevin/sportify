[{"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/index.js":"1","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/App.js":"2","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/pages/LoginPage/LoginPage.js":"3","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/Header/Header.js":"4","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/pages/SearchPage/SearchPage.js":"5","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/Input/Input.js":"6","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/TeamDetails/TeamDetails.js":"7","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/EventScore/EventScore.js":"8","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/functions/dateToString.js":"9","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/VideoBox/VideoBox.js":"10","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/CommentForm/CommentForm.js":"11","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/ProfileImage/ProfileImage.js":"12","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/Comment/Comment.js":"13","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/functions/timeDifference.js":"14","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/NewsArticle/NewsArticle.js":"15","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/functions/videoWatchToEmbed.js":"16","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/pages/GamePage/GamePage.js":"17","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/VideoMain/VideoMain.js":"18","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/VideoInfo/VideoInfo.js":"19","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/pages/HomePage/HomePage.js":"20","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/Avatar/Avatar.js":"21","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/TeamCard/TeamCard.js":"22","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/pages/UserPage/UserPage.js":"23","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/IsFriend/IsFriend.js":"24","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/SocialButton/SocialButton.js":"25","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/FeedForm/FeedForm.js":"26","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/FeedCard/FeedCard.js":"27","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/FeedCardForm/FeedCardForm.js":"28","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/ContentActions/ContentActions.js":"29","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/ContentShare/ContentShare.js":"30","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/FeedCardComment/FeedCardComment.js":"31","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/functions/getTeamNames.js":"32","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/pages/ActualUserPage/ActualUserPage.js":"33"},{"size":221,"mtime":1623335395415,"results":"34","hashOfConfig":"35"},{"size":2944,"mtime":1624385240582,"results":"36","hashOfConfig":"35"},{"size":1430,"mtime":1623850600805,"results":"37","hashOfConfig":"35"},{"size":2064,"mtime":1624453693277,"results":"38","hashOfConfig":"35"},{"size":3137,"mtime":1624297557069,"results":"39","hashOfConfig":"35"},{"size":885,"mtime":1624234034476,"results":"40","hashOfConfig":"35"},{"size":11654,"mtime":1624394398835,"results":"41","hashOfConfig":"35"},{"size":990,"mtime":1623674189905,"results":"42","hashOfConfig":"35"},{"size":377,"mtime":1623673468511,"results":"43","hashOfConfig":"35"},{"size":692,"mtime":1624020674041,"results":"44","hashOfConfig":"35"},{"size":1360,"mtime":1624035075704,"results":"45","hashOfConfig":"35"},{"size":239,"mtime":1624213481243,"results":"46","hashOfConfig":"35"},{"size":1029,"mtime":1624192517881,"results":"47","hashOfConfig":"35"},{"size":1722,"mtime":1623705365996,"results":"48","hashOfConfig":"35"},{"size":596,"mtime":1623710143131,"results":"49","hashOfConfig":"35"},{"size":374,"mtime":1623762587065,"results":"50","hashOfConfig":"35"},{"size":11776,"mtime":1624394056150,"results":"51","hashOfConfig":"35"},{"size":545,"mtime":1624279924861,"results":"52","hashOfConfig":"35"},{"size":3256,"mtime":1624323156358,"results":"53","hashOfConfig":"35"},{"size":13809,"mtime":1624394394620,"results":"54","hashOfConfig":"35"},{"size":249,"mtime":1623793096562,"results":"55","hashOfConfig":"35"},{"size":328,"mtime":1623882112102,"results":"56","hashOfConfig":"35"},{"size":18007,"mtime":1624394388913,"results":"57","hashOfConfig":"35"},{"size":2008,"mtime":1624195130375,"results":"58","hashOfConfig":"35"},{"size":696,"mtime":1624190745012,"results":"59","hashOfConfig":"35"},{"size":1408,"mtime":1624222363252,"results":"60","hashOfConfig":"35"},{"size":3137,"mtime":1624321650569,"results":"61","hashOfConfig":"35"},{"size":1937,"mtime":1624287786181,"results":"62","hashOfConfig":"35"},{"size":1045,"mtime":1624229254270,"results":"63","hashOfConfig":"35"},{"size":3151,"mtime":1624276440192,"results":"64","hashOfConfig":"35"},{"size":1133,"mtime":1624285381861,"results":"65","hashOfConfig":"35"},{"size":362,"mtime":1624381762062,"results":"66","hashOfConfig":"35"},{"size":33657,"mtime":1624454103025,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"1iqy524",{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"70"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"70"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"70"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"102","usedDeprecatedRules":"70"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"70"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"70"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"70"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"70"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"70"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144"},"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/index.js",[],["145","146"],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/App.js",["147","148"],"import './App.scss';\nimport React from 'react';\nimport axios from 'axios';\nimport {BrowserRouter, Redirect, Switch, Route} from 'react-router-dom';\n\nimport LoginPage from './pages/LoginPage/LoginPage';\nimport SearchPage from './pages/SearchPage/SearchPage';\nimport GamePage from './pages/GamePage/GamePage';\nimport HomePage from './pages/HomePage/HomePage';\nimport UserPage from './pages/UserPage/UserPage';\nimport ActualUserPage from './pages/ActualUserPage/ActualUserPage';\n\nimport Header from './components/Header/Header';\n\nconst token = sessionStorage.getItem(\"token\");\nconst localUrl = \"http://localhost:8686\"\n\nclass App extends React.Component {\n\n  state = {\n    loggedIn: false,\n    currentUser: null,\n    url: \"\"\n  }\n\n  componentDidMount() {\n    \n\n    //checking if logged in\n    if(token) {\n\n      axios.get(localUrl + \"/users\", {headers: {Authorization: `Bearer ${token}`}})\n      .then(response => {\n\n        this.setState({\n          loggedIn: true,\n          currentUser: response.data\n        })\n\n      })\n    }\n\n  }\n\n  taskLogin = (event) => {\n    \n    event.preventDefault();\n    \n    const userName = event.target.userName.value;\n    const password = event.target.password.value;\n    \n    const loginCredentials = {\n      userName,\n      password\n    }\n\n    axios.post(localUrl + \"/login\", loginCredentials)\n    .then(response => {\n      const token = response.data.token;\n      sessionStorage.setItem(\"token\", token);\n      \n      return axios.get(localUrl + \"/users\", {headers: {Authorization: `Bearer ${token}`}})\n    })\n    .then(response => {\n      \n      this.setState({\n        loggedIn: true,\n        currentUser: response.data\n      })\n    })\n    .catch(error => {\n\n      console.log(error);\n    })\n\n  }\n\n  taskUpdateUrl = (url) => {\n\n    this.setState({\n      url: url\n    })\n\n  }\n\n  render() {\n\n    const {loggedIn, currentUser, url} = this.state;\n    \n    return (\n      <BrowserRouter>\n        <Header \n          loggedIn={loggedIn} \n          imgUrl={currentUser && currentUser.imgUrl} \n          url={url}\n        />\n        <Switch>\n            {!loggedIn && <Route path=\"/login\" render={(routerProps) => <LoginPage taskLogin={this.taskLogin} {...routerProps}/> } />}\n            {loggedIn && <Route path=\"/home\" render={(routerProps) => <ActualUserPage taskUpdateUrl={this.taskUpdateUrl} {...routerProps}/> } />}\n            {loggedIn && <Route path=\"/user/:userId\" render={(routerProps) => <ActualUserPage taskUpdateUrl={this.taskUpdateUrl} {...routerProps}/> } />}\n            {loggedIn && <Route path=\"/search\" render={(routerProps) => <SearchPage taskUpdateUrl={this.taskUpdateUrl} {...routerProps}/> } />}\n            {loggedIn && <Route path=\"/game/:videoId\" render={(routerProps) => <GamePage taskUpdateUrl={this.taskUpdateUrl} {...routerProps}/> } />}\n            {loggedIn ? <Redirect to=\"/home\"/> : <Redirect to=\"/login\"/>}\n        </Switch>\n      </BrowserRouter>\n    );\n  } \n}\n\nexport default App;\n","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/pages/LoginPage/LoginPage.js",[],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/Header/Header.js",[],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/pages/SearchPage/SearchPage.js",[],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/Input/Input.js",[],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/TeamDetails/TeamDetails.js",[],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/EventScore/EventScore.js",[],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/functions/dateToString.js",[],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/VideoBox/VideoBox.js",["149"],"import './VideoBox.scss';\n\nimport videoWatchToEmbed from '../../functions/videoWatchToEmbed';\n\nfunction VideoBox({className, videoSrc, videoName, videoId, onClick}) {\n    \n    if(!videoSrc) {\n        return <div></div>\n    }\n\n    const video = videoWatchToEmbed(videoSrc);\n\n    return (\n\n        <article className={`${className} video-box`} onClick={() => onClick(videoId, videoSrc)}>\n            <iframe className=\"video-box__frame\" src={video} type=\"video/mp4\" frameBorder=\"0\" allowfullscreen /> \n            <div className=\"video-box__name-container\">\n                <h4 className=\"video-box__name\">{videoName}</h4>\n            </div>\n        </article>\n    )\n}\n\nexport default VideoBox;","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/CommentForm/CommentForm.js",["150"],"import \"./CommentForm.scss\";\n\nimport ProfileImage from '../ProfileImage/ProfileImage';\n\nfunction CommentForm ({className, onSubmit, profileUrl}) {\n\n    return (\n        <form className={`${className} form`} onSubmit={onSubmit}>\n            <div className=\"form__avatar-container\">\n                <ProfileImage \n                    className=\"form__profile-image\"\n                    imgSrc={profileUrl}\n                />\n            </div>\n            <div className=\"form__container\">\n                <label className=\"form__title\" htmlFor=\"input\">JOIN THE CONVERSATION</label>\n                <div className=\"form__input-box\">\n                    <div className=\"form__input-container\">\n                        <textarea \n                            className=\"form__input\" \n                            id=\"input\"\n                            name=\"input\" \n                            type=\"text\"\n                            placeholder=\"Add a comment...\"\n                            name=\"comment\"\n                        >\n                        </textarea>\n                    </div>\n                    <div className=\"form__button-container\">\n                        <button className=\"form__button\" type=\"submit\">SUBMIT</button>\n                    </div>\n                </div>\n            </div>\n        </form>\n    )\n}\n\nexport default CommentForm;","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/ProfileImage/ProfileImage.js",[],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/Comment/Comment.js",[],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/functions/timeDifference.js",[],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/NewsArticle/NewsArticle.js",["151","152"],"import './NewsArticle.scss';\nimport {Link} from 'react-router-dom';\n\nfunction NewsArticle ({className, newsArticle}) {\n    \n    const {title, image, url} = newsArticle;\n\n    return (\n        <a href={url} target=\"_blank\">\n            <article className={`${className} article`}>\n                <img className=\"article__img\" src={image} alt=\"news article\"/>           \n                <div className=\"article__description-container\">\n                    <h3 className=\"article__title\">{title}</h3>\n                </div>\n            </article>\n        </a>   \n    )\n}\n\nexport default NewsArticle;","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/functions/videoWatchToEmbed.js",[],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/pages/GamePage/GamePage.js",[],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/VideoMain/VideoMain.js",["153"],"import './VideoMain.scss'\n\nfunction VideoMain({videoSrc, className, disabled}) {\n\n    let video__disabled;\n\n    if (disabled) {\n        video__disabled = \"video__frame--disabled\";\n    }\n    else {\n        video__disabled = \"\";\n    }\n\n    return (\n        <div className={`${className} video`}>\n            <div className=\"video__wrapper\">\n                <iframe className={`video__frame ${video__disabled}`} src={videoSrc} type=\"video/mp4\" frameBorder=\"0\" allowfullscreen /> \n            </div>\n        </div>\n    )\n}\n\nexport default VideoMain;","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/VideoInfo/VideoInfo.js",["154","155"],"import './VideoInfo.scss';\n\nimport CommentForm from '../CommentForm/CommentForm';\nimport Comment from '../Comment/Comment';\nimport ContentActions from '../ContentActions/ContentActions';\n\nfunction VideoInfo({className , currentEvent, currentUser, comments, taskSubmitComment, taskShareVideo}) {\n\n    const {strLeague, strEvent, strDescriptionEN, intHomeScore, intAwayScore, dateEvent} = currentEvent;\n    \n    return (\n        <div className={`${className} video-info`}>\n            <section className=\"video-info_description description\">\n                <header className=\"description__header\">\n                    <h1 className=\"description__title\">{strEvent}</h1>\n                    <div className=\"description__sub-title-container\">\n                        <p className=\"description__sub-title\">By {strLeague}</p>\n                        <p className=\"description__date\">{dateEvent}</p>\n                    </div>  \n                </header>\n                {strDescriptionEN \n                    ? \n                    <div className=\"description__text-container\">\n                        <p className=\"description__text\">{strDescriptionEN}</p>\n                    </div>\n                    :\n                    <div className=\"description__text-container\">\n                        <p className=\"description__text\">Led by Giannis Antetokounmpo’s 20 \n                        points, 12 rebounds and Playoff career-high 15 assists, the No. 3 seed \n                        Bucks defeated the No. 6 seed Heat, 120-103, in Game 4. Brook Lopez added \n                        a game-high 25 points (11-15 FG) for the Bucks in the victory, while \n                        Jimmy Butler tallied 12 points, 10 rebounds and 10 assists for the Heat \n                        in the losing effort. The Bucks have now closed out this best-of-seven \n                        series, 4-0, and will advance to the Eastern Conference Semifinals to face \n                        the winner of the Brooklyn Nets – Boston Celtics series (Brooklyn currently \n                        leads, 2-1).</p>\n                    </div>\n                }       \n                <ContentActions \n                    className=\"description__actions\"\n                    taskShareVideo={taskShareVideo}\n                />\n            </section>\n            <div className=\"video-info__comments comments\">\n                <h2 className=\"comments__title\">Comments</h2>\n                <CommentForm \n                    className=\"comments__form\" \n                    onSubmit={taskSubmitComment}\n                    profileUrl={currentUser.imgUrl}\n                />\n                {comments.map(comment => {\n                    return(\n                        <Comment \n                            key={comment.commentId}\n                            className= \"comments__comment\"\n                            userId={comment.userId}\n                            name={comment.name}\n                            date={comment.timestamp}\n                            text={comment.commentText}\n                            profileUrl={comment.imgUrl}\n                        />)\n                    })\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default VideoInfo;","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/pages/HomePage/HomePage.js",["156","157","158","159","160"],"import './HomePage.scss';\nimport React from 'react';\nimport axios from 'axios';\nimport {Link} from \"react-router-dom\";\n\nimport Avatar from '../../components/Avatar/Avatar';\nimport TeamCard from '../../components/TeamCard/TeamCard';\nimport TeamDetails from '../../components/TeamDetails/TeamDetails';\nimport EventScore from '../../components/EventScore/EventScore';\nimport NewsArticle from '../../components/NewsArticle/NewsArticle';\nimport ProfileImage from '../../components/ProfileImage/ProfileImage';\nimport FeedForm from '../../components/FeedForm/FeedForm';\nimport FeedCard from '../../components/FeedCard/FeedCard';\n\nimport homeIcon from '../../assets/icons/home-icon.png';\nimport locationIcon from '../../assets/icons/location-icon.png';\n\nimport timeDifference from '../../functions/timeDifference';\nimport getTeamNames from '../../functions/getTeamNames';\n\nconst API__KEY=\"dd7ed4159ce8b1df6d8cbadaa67c7cdf\";\nconst localUrl = \"http://localhost:8686\";\n\n\nclass HomePage extends React.Component {\n\n\n    state = {\n        index: 0,\n        favouriteTeams:[],\n        selectedTeam: null,\n        detailsEnabled: false,\n        pastEvents: [],\n        articles: [],\n        profileInfo: {},\n        friends: [],\n        requests: [],\n        feed: [],\n        feedComments: []\n    }\n\n    componentDidMount() {\n        this.props.taskUpdateUrl(this.props.match.url);\n        const token = sessionStorage.getItem(\"token\");\n\n        axios.all([\n            axios.get(localUrl + \"/favourites\", {headers: {Authorization: `Bearer ${token}`}}),\n            axios.get(localUrl + \"/users\", {headers: {Authorization: `Bearer ${token}`}}),\n            axios.get(localUrl + \"/friends\", {headers: {Authorization: `Bearer ${token}`}}),\n            axios.get(localUrl + \"/requests\", {headers: {Authorization: `Bearer ${token}`}}),\n            axios.get(localUrl + \"/feed/\" + \"currentUser\", {headers: {Authorization: `Bearer ${token}`}}),\n            axios.get(localUrl + \"/comments/feedComments/\" + \"currentUser\", {headers: {Authorization: `Bearer ${token}`}}),\n        ])\n        .then(axios.spread((favouritesResponse, profileResponse, friendsResponse, \n            requestsResponse, feedResponse, feedCommentsResponse)=> {\n\n            if(favouritesResponse.data){\n                this.setState({\n                    favouriteTeams: favouritesResponse.data,\n                    profileInfo: profileResponse.data,\n                    friends: friendsResponse.data,\n                    requests: requestsResponse.data,\n                    feed: feedResponse.data,\n                    feedComments: feedCommentsResponse.data\n                })\n            }\n            else {\n                this.setState({\n                    profileInfo: profileResponse.data,\n                    friends: friendsResponse.data,\n                    requests: requestsResponse.data,\n                    feed: feedResponse.data,\n                    feedComments: feedCommentsResponse.data\n                })\n            }\n            \n            \n\n            // \n        }))\n    }\n\n    componentDidUpdate() {\n        // const {index, favouriteTeams, pastEvents, articles} = this.state;\n\n        // if(index < favouriteTeams.length) {\n\n        //     const teamId = favouriteTeams[index].idTeam;\n        //     const teamName = favouriteTeams[index].strTeam;\n\n        //     setTimeout(axios.all([\n        //         axios.get(\"https://www.thesportsdb.com/api/v1/json/40130162/eventslast.php?id=\" + teamId),\n        //         axios.get(\"https://gnews.io/api/v4/search?q=\" + teamName + \"&token=\" + API__KEY + \"&lang=en\")\n        //     ]).then(axios.spread((pastEventsResponse, teamNewsResponse) => {\n\n        //         let newPastEvents = pastEventsResponse.data.results;\n        //         let newArticles = teamNewsResponse.data.articles;\n\n        //         newPastEvents = newPastEvents.map(event => {\n        //             const {strHomeTeam, strAwayTeam, intHomeScore, intAwayScore, dateEvent, strVideo, strFilename} = event;\n        //             return {strHomeTeam, strAwayTeam, intHomeScore, intAwayScore, dateEvent, strVideo, strFilename};\n        //         })\n\n        //         newArticles = newArticles.map(article => {\n        //             const {title, image, url} = article;\n        //             return {title, image, url};\n        //         })\n                \n        //         this.setState({\n        //             index: index + 1,\n        //             pastEvents: [...pastEvents, ...newPastEvents],\n        //             articles: [...articles, ...newArticles]\n        //         })\n        //     })) ,1000)\n            \n\n        // }\n        \n        \n        \n    }\n\n    taskDisplayTeam = (teamId) => {\n        axios.get(\"https://www.thesportsdb.com/api/v1/json/40130162/lookupteam.php?id=\" + teamId)\n        .then(response => {\n            const selectedTeam = response.data.teams[0];\n\n            this.setState({\n                selectedTeam: selectedTeam,\n                detailsEnabled: true\n            })\n        })\n    }\n\n    taskEndDisplayTeam = () => {\n        \n        this.setState({\n            detailsEnabled: false\n        })\n    }\n\n    taskUpdateFavourites = () => {\n\n        const token = sessionStorage.getItem(\"token\");\n\n        axios.get(localUrl + \"/favourites\", {headers: {Authorization: `Bearer ${token}`}})\n        .then(response => {\n            \n            if(response.data){\n                this.setState({\n                    favouriteTeams: response.data\n                })\n            }\n            else {\n                this.setState({\n                    favouriteTeams: []\n                })\n            } \n\n        })\n    }\n\n    taskAddPost = (event) => {\n\n        event.preventDefault();\n    \n        const token = sessionStorage.getItem(\"token\");\n\n        const commentText = event.target.commentText.value;\n        const contentType = \"comment\";\n        const userId = '';\n        \n        const commentData = {\n            userId, \n            commentText, \n            contentType\n        }\n        \n        axios.post(localUrl + \"/feed\", commentData, {headers: {Authorization: `Bearer ${token}`}})\n        .then(response => {\n            this.setState({\n                feed: response.data\n            }, () => {\n                event.target.reset();\n            })\n        })\n\n    }\n\n    taskAddCommentToPost = (event) => {\n\n        event.preventDefault();\n\n        const token = sessionStorage.getItem(\"token\");\n\n        const commentText = event.target.commentText.value;\n        const contentId = event.target.contentId.value;\n        const contentType = event.target.contentType.value;\n        const receiverId = event.target.receiverId.value;\n\n        const feedCommentData = {\n            contentId, \n            contentType, \n            commentText, \n            receiverId\n        }\n\n        axios.post(localUrl + \"/comments\", feedCommentData, {headers: {Authorization: `Bearer ${token}`}})\n        .then(_response => {\n\n            return axios.get(localUrl + \"/comments/feedComments/\" + \"currentUser\", {headers: {Authorization: `Bearer ${token}`}})\n        })\n        .then(response => {\n\n            this.setState({\n                feedComments: response.data\n            }, () => {\n\n                event.target.reset();\n            })\n        })\n    }\n\n    taskTakeToGamePage = (idEvent) => {\n\n        this.props.history.push('/game/' + idEvent);\n    }\n\n    render () {\n\n        const {favouriteTeams, selectedTeam, detailsEnabled, \n            pastEvents, articles, profileInfo, friends, requests,\n            feed, feedComments} = this.state;\n\n        return(\n            <main className=\"home\">\n                <div className=\"home__profile profile\">\n                    <Avatar \n                        className=\"profile__avatar\" \n                        avatarUrl={profileInfo.imgUrl} \n                    />\n                    <div className=\"profile__info\">\n                        <h3 className=\"profile__name\">{profileInfo.name} {profileInfo.lastName}</h3>\n                        <p className=\"profile__date\">Joined {timeDifference(profileInfo.timestamp)}</p>\n                        <p className=\"profile__description\">{profileInfo.description}</p>\n                        <div className=\"profile__location-container\">\n                            <img className=\"profile__location-icon\" src={homeIcon} alt=\"location\"/>\n                            <p className=\"profile__location\">Lives in <span className=\"profile__bold\">{profileInfo.location}</span></p>\n                        </div> \n                        <div className=\"profile__location-container\">\n                            <img className=\"profile__location-icon\" src={locationIcon} alt=\"location\"/>\n                            <p className=\"profile__location\">From <span className=\"profile__bold\">{profileInfo.from}</span></p>\n                        </div> \n                    </div>\n                </div>\n                <div className=\"home__interaction interaction\">\n                    <div className=\"interaction__favourites\">\n                        {favouriteTeams.map(team => {\n                            return (\n                                <TeamCard \n                                    className=\"interaction__fav-card\" \n                                    taskDisplayTeam={this.taskDisplayTeam}\n                                    strTeamBadge={team.strTeamBadge}\n                                    teamId={team.idTeam} \n                                />\n                            )\n                        })} \n                    </div>\n                    <div className=\"interaction__feed-container\">\n                        <div className=\"interaction__feed feed\">\n                            <div className=\"feed__card\">\n                                <FeedForm \n                                    className=\"feed__form\"\n                                    onSubmit={this.taskAddPost}\n                                    profileUrl={profileInfo.imgUrl}\n                                    feedTitle=\"Your Feed\"\n                                    placeholder=\"Tell us what is top of mind for you...\"\n                                />\n                            </div>\n                            {feed.map(feedContent => {\n                                return (\n                                    <FeedCard \n                                        className=\"feed__card\"\n                                        feedContent={feedContent}\n                                        feedComments={feedComments}\n                                        taskTakeToGamePage={this.taskTakeToGamePage}\n                                        taskAddCommentToPost={this.taskAddCommentToPost}\n                                        userAvatar={profileInfo.imgUrl}\n                                    />\n                                )\n                            })}\n                            \n                        </div>\n                    </div>\n                </div>\n                <div className=\"home__updates updates\">\n                    <div className=\"updates__container\">\n                        {pastEvents.map(event => {\n                            return <EventScore event={event} />\n                        })}\n                    </div>\n                    <div className=\"updates__container\">\n                        {articles.map(article => {\n                            return (\n                                <NewsArticle \n                                    className=\"team__news-article\" \n                                    newsArticle={article} \n                                />\n                            )\n                        })}\n                    </div>\n                </div>\n                <div className=\"home__friends friends\">\n                    <div className=\"friends__wrapper\">\n                        <div className=\"friends__container\">\n                            <h3 className=\"friends__title\">Friends</h3>\n                            {friends.map(friend => {\n                                return(\n                                    <Link key={friend.friendId} to={\"/user/\" + friend.friendId}>\n                                        <ProfileImage \n                                            className=\"friends__avatar\"\n                                            imgSrc={friend.imgUrl}\n                                        />\n                                    </Link>\n                                )\n                            })}\n                        </div>\n                        <div className=\"friends__request-container\">\n                            <h3 className=\"friends__title\">Requests</h3>\n                            {requests.map(request => {\n                                return(\n                                    <Link key={request.requestorId} to={\"/user/\" + request.requestorId}>\n                                        <ProfileImage \n                                            key={request.requestorId}\n                                            className=\"friends__avatar\"\n                                            imgSrc={request.imgUrl}\n                                        />\n                                    </Link>\n                                )\n                            })}\n                        </div>\n                    </div>\n                </div>\n                {detailsEnabled && \n                    <TeamDetails \n                        team={selectedTeam} \n                        taskEndDisplayTeam={this.taskEndDisplayTeam}\n                        taskUpdateFavourites={this.taskUpdateFavourites}\n                    />\n                }\n            </main>\n        )\n    }\n    \n}\n\nexport default HomePage;","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/Avatar/Avatar.js",[],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/TeamCard/TeamCard.js",[],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/pages/UserPage/UserPage.js",[],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/IsFriend/IsFriend.js",[],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/SocialButton/SocialButton.js",[],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/FeedForm/FeedForm.js",["161"],"import \"./FeedForm.scss\";\n\nimport ProfileImage from '../ProfileImage/ProfileImage';\n\nfunction FeedForm ({className, onSubmit, profileUrl, feedTitle, placeholder}) {\n\n    return (\n        <form className={`${className} feed-form`} onSubmit={onSubmit}>\n            <div className=\"feed-form__avatar-container\">\n                <ProfileImage \n                    className=\"feed-form__profile-image\"\n                    imgSrc={profileUrl}\n                />\n            </div>\n            <div className=\"feed-form__container\">\n                <label className=\"feed-form__title\" htmlFor=\"input\">{feedTitle}</label>\n                <div className=\"feed-form__input-box\">\n                    <div className=\"feed-form__input-container\">\n                        <input \n                            className=\"feed-form__input\" \n                            id=\"input\"\n                            name=\"input\" \n                            type=\"text\"\n                            placeholder={placeholder}\n                            name=\"commentText\"\n                        >\n                        </input>\n                    </div>\n                    <div className=\"feed-form__button-container\">\n                        <button className=\"feed-form__button\" type=\"submit\">SUBMIT</button>\n                    </div>\n                </div>\n            </div>\n        </form>\n    )\n}\n\nexport default FeedForm;","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/FeedCard/FeedCard.js",["162","163","164"],"import './FeedCard.scss';\n\nimport FeedCardForm from '../FeedCardForm/FeedCardForm';\nimport ContentActions from '../ContentActions/ContentActions';\nimport VideoMain from '../VideoMain/VideoMain';\nimport FeedCardComment from '../FeedCardComment/FeedCardComment';\n\nimport arrowIcon from '../../assets/icons/arrow-icon.png';\nimport friendIcon from '../../assets/icons/friend-icon.png';\n\nimport dateToString from '../../functions/dateToString';\nimport videoWatchToEmbed from '../../functions/videoWatchToEmbed';\n\nfunction FeedCard ({className, feedContent, feedComments, taskTakeToGamePage, taskAddCommentToPost, userAvatar}) {\n\n    const {feedId, userId, commentorName, userName, imgUrl, commentText, timestamp, \n        idEvent, strEvent, intHomeScore, intAwayScore, strVideo} = feedContent;\n\n    const cardComments = feedComments.filter(comment => comment.contentId === feedId)\n\n    return (\n        <article className={`feed-card ${className}`}>\n            <div className=\"feed-card__info\">\n                <img className=\"feed-card__avatar\" src={imgUrl} alt=\"avatar\"/>\n                <div className=\"feed-card__background\">\n                    <div className=\"feed-card__name-container\">\n                        <h3 className=\"feed-card__name\">{commentorName}</h3>\n                        {commentorName !== userName ? <img className=\"feed-card__arrow\" src={arrowIcon} alt=\"arrow\"/> : <div></div>}\n                        {commentorName !== userName ? <h3 className=\"feed-card__name\">{userName}</h3> : <div></div>}\n                    </div>\n                    <div className=\"feed-card__date-container\">\n                        <p className=\"feed-card__date\">{dateToString(timestamp)}</p>\n                        <img className=\"feed-card__friend-icon\" src={friendIcon} alt=\"friend\"/>\n                    </div>\n                </div>\n            </div>\n            <div className=\"feed-card__comment-container\">\n                <p className=\"feed-card__comment\">{commentText}</p>\n            </div>\n            {idEvent &&\n                <div className=\"feed-card__video-container\" onClick={() => taskTakeToGamePage(idEvent)}>\n                    <VideoMain className=\"feed-card__video\" videoSrc={videoWatchToEmbed(strVideo)} disabled={true}/>\n                </div>\n            }\n            <ContentActions \n                className=\"feed-card__actions\"\n            />\n            {cardComments.map(comment => {\n                return (\n                    <FeedCardComment \n                        className=\"feed-card__comment\"\n                        userId={comment.userId}\n                        name={comment.name}\n                        date={comment.timestamp}\n                        text={comment.commentText}\n                        profileUrl={comment.imgUrl}\n                    />\n                )\n            })}\n            <FeedCardForm \n                className=\"feed-card__form\"\n                onSubmit={taskAddCommentToPost}\n                profileUrl={userAvatar}\n                contentId={feedId}\n                receiverId={userId}\n            />\n        </article>\n    )\n}\n\nexport default FeedCard;","/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/FeedCardForm/FeedCardForm.js",[],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/ContentActions/ContentActions.js",[],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/ContentShare/ContentShare.js",[],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/components/FeedCardComment/FeedCardComment.js",[],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/functions/getTeamNames.js",[],"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/pages/ActualUserPage/ActualUserPage.js",["165","166","167","168","169","170","171","172","173","174"],"import './ActualUserPage.scss';\nimport React from 'react';\nimport axios from 'axios';\nimport {Link} from 'react-router-dom';\nimport io from 'socket.io-client';\n\nimport Avatar from '../../components/Avatar/Avatar';\nimport TeamCard from '../../components/TeamCard/TeamCard';\nimport TeamDetails from '../../components/TeamDetails/TeamDetails';\nimport EventScore from '../../components/EventScore/EventScore';\nimport NewsArticle from '../../components/NewsArticle/NewsArticle';\nimport ProfileImage from '../../components/ProfileImage/ProfileImage';\nimport IsFriend from '../../components/IsFriend/IsFriend';\nimport FeedForm from '../../components/FeedForm/FeedForm';\nimport FeedCard from '../../components/FeedCard/FeedCard';\n\nimport lockIcon from '../../assets/icons/lock-icon.png';\nimport homeIcon from '../../assets/icons/home-icon.png';\nimport locationIcon from '../../assets/icons/location-icon.png';\n\nimport timeDifference from '../../functions/timeDifference';\n\n\nconst API__KEY=\"dd7ed4159ce8b1df6d8cbadaa67c7cdf\";\nconst localUrl = \"http://localhost:8686\";\nlet socket;\n\n\nclass ActualUserPage extends React.Component {\n\n\n    state = {\n        index: 0,\n        favouriteTeams:[],\n        selectedTeam: null,\n        detailsEnabled: false,\n        pastEvents: [],\n        articles: [],\n        currentUser: {},\n        profileInfo: {},\n        currentIsProfile: null,\n        friends: [],\n        requests: [],\n        isFriend: null,\n        isRequestSent: false,\n        isRequestReceived: false,\n        feed: [],\n        feedComments: []\n    }\n\n    componentDidMount(prevProps, _prevState) {\n\n        const url = this.props.match.url;\n        const previousUrl = prevProps && prevProps.match.url;\n\n        if(url !== previousUrl) {\n            this.props.taskUpdateUrl(this.props.match.url);\n        }\n\n        const token = sessionStorage.getItem(\"token\");\n        let userId = this.props.match.params.userId;\n\n        socket = io.connect(localUrl);\n\n        if(!userId) {\n\n            socket.on(\"feedPostUpdate\", () => {\n                axios.get(localUrl + \"/feed/\" + \"currentUser\", {headers: {Authorization: `Bearer ${token}`}})\n                .then(response => {\n                    \n                    this.setState({\n                        feed: response.data\n                    })\n                })\n            });\n\n            socket.on(\"feedPostCommentUpdate\", () => {\n                axios.get(localUrl + \"/comments/feedComments/\"  + \"currentUser\", {headers: {Authorization: `Bearer ${token}`}})\n                .then(response => {\n                    \n                    this.setState({\n                        feedComments: response.data\n                    })\n                })\n            });\n\n            socket.on(\"friendRequestUpdate\", () => {\n                axios.get(localUrl + \"/requests\", {headers: {Authorization: `Bearer ${token}`}})\n                .then(response => {\n\n                    this.setState({\n                        requests: response.data,\n                    })\n                })\n            });\n\n            socket.off(\"friendAcceptUpdate\");\n\n            axios.get(localUrl + \"/users\", {headers: {Authorization: `Bearer ${token}`}})\n            .then(response => {\n                \n                userId = response.data.userId;\n                console.log(userId)\n\n                this.setState({\n                    currentUser: response.data,\n                    profileInfo: response.data,\n                    currentIsProfile: true\n                })\n\n                return axios.all([\n                    axios.get(localUrl + \"/favourites\", {headers: {Authorization: `Bearer ${token}`}}),\n                    axios.get(localUrl + \"/friends\", {headers: {Authorization: `Bearer ${token}`}}),\n                    axios.get(localUrl + \"/requests\", {headers: {Authorization: `Bearer ${token}`}}),\n                    axios.get(localUrl + \"/feed/\" + \"currentUser\", {headers: {Authorization: `Bearer ${token}`}}),\n                    axios.get(localUrl + \"/comments/feedComments/\" + \"currentUser\", {headers: {Authorization: `Bearer ${token}`}})\n                ])\n            })\n            .then(axios.spread((favouritesResponse, friendsResponse, requestsResponse, feedResponse, feedCommentsResponse)=> {\n                \n                if(favouritesResponse.data){\n                    this.setState({\n                        favouriteTeams: favouritesResponse.data,\n                        friends: friendsResponse.data,\n                        requests: requestsResponse.data,\n                        feed: feedResponse.data,\n                        feedComments: feedCommentsResponse.data,\n                        isFriend: true\n                    })\n                }\n                else {\n                    this.setState({\n                        friends: friendsResponse.data,\n                        requests: requestsResponse.data,\n                        feed: feedResponse.data,\n                        feedComments: feedCommentsResponse.data,\n                        isFriend: true\n                    },() =>  console.log(\"yess\"))\n                    \n                } \n            }))\n            .catch(error => {\n                console.log(error)\n            })\n        }\n        else {\n\n            socket.on(\"feedPostUpdate\", () => {\n                axios.get(localUrl + \"/feed/\" + userId, {headers: {Authorization: `Bearer ${token}`}})\n                .then(response => {\n                    \n                    this.setState({\n                        feed: response.data\n                    })\n                })\n            });\n\n            socket.on(\"feedPostCommentUpdate\", () => {\n                axios.get(localUrl + \"/comments/feedComments/\"  + userId, {headers: {Authorization: `Bearer ${token}`}})\n                .then(response => {\n                    \n                    this.setState({\n                        feedComments: response.data\n                    })\n                })\n            });\n\n            socket.on(\"friendAcceptUpdate\", () => {\n\n                console.log(\"it is working\");\n                axios.all([\n                    axios.get(localUrl + \"/friends/isFriend/\" + userId, {headers: {Authorization: `Bearer ${token}`}}),\n                    axios.get(localUrl + \"/friends/\" + userId, {headers: {Authorization: `Bearer ${token}`}})\n                ])\n                .then(axios.spread((isFriendResponse, friendsResponse) => {\n                    console.log(isFriendResponse.data, friendsResponse.data)\n                    \n                    this.setState({\n                        isFriend: isFriendResponse.data,\n                        friends: friendsResponse.data\n                    })\n                }))\n            });\n\n            socket.off(\"friendRequestUpdate\");\n\n            axios.all([\n                axios.get(localUrl + \"/favourites/user/\" + userId, {headers: {Authorization: `Bearer ${token}`}}),\n                axios.get(localUrl + \"/users/\" + userId, {headers: {Authorization: `Bearer ${token}`}}),\n                axios.get(localUrl + \"/users\", {headers: {Authorization: `Bearer ${token}`}}),\n                axios.get(localUrl + \"/friends/\" + userId, {headers: {Authorization: `Bearer ${token}`}}),\n                axios.get(localUrl + \"/feed/\" + userId, {headers: {Authorization: `Bearer ${token}`}}),\n                axios.get(localUrl + \"/comments/feedComments/\" + userId, {headers: {Authorization: `Bearer ${token}`}})\n            ])\n            .then(axios.spread((favouritesResponse, profileResponse, currentUserResponse, \n                friendsResponse, feedResponse, feedCommentsResponse)=> {\n                if(favouritesResponse.data){\n                    this.setState({\n                        favouriteTeams: favouritesResponse.data,\n                        currentUser: currentUserResponse.data,\n                        profileInfo: profileResponse.data,\n                        currentIsProfile: false,\n                        friends: friendsResponse.data,\n                        feed: feedResponse.data,\n                        feedComments: feedCommentsResponse.data,\n                    })\n                }\n                else {\n                    this.setState({\n                        currentUser: currentUserResponse.data,\n                        profileInfo: profileResponse.data,\n                        currentIsProfile: false,\n                        friends: friendsResponse.data,\n                        feed: feedResponse.data,\n                        feedComments: feedCommentsResponse.data,\n                    })\n                    \n                } \n            \n                return axios.all([\n                    axios.get(localUrl + \"/friends/isFriend/\" + userId, {headers: {Authorization: `Bearer ${token}`}}),\n                    axios.get(localUrl + \"/requests/isRequestSent/\" + userId, {headers: {Authorization: `Bearer ${token}`}}),\n                    axios.get(localUrl + \"/requests/isRequestReceived/\" + userId, {headers: {Authorization: `Bearer ${token}`}})\n                ])\n            }))\n            .then(axios.spread((isFriendResponse, isSentResponse, isRecievedResponse) => {\n    \n                this.setState({\n                    isFriend: isFriendResponse.data.isFriend,\n                    isRequestSent: isSentResponse.data.isRequestSent,\n                    isRequestReceived: isRecievedResponse.data.isRequestReceived\n                })\n            }))\n            .catch(error => {\n                console.log(error)\n            })\n        }\n\n        \n    }\n\n    componentDidUpdate(prevProps, _prevState) {\n        \n        const url = this.props.match.url;\n        const previousUrl = prevProps && prevProps.match.url;\n\n        if(url !== previousUrl) {\n            this.props.taskUpdateUrl(this.props.match.url);\n        }\n\n        const token = sessionStorage.getItem(\"token\");\n\n        const userId = this.props.match.params.userId;\n        const prevUserId = prevProps.match.params.userId;\n\n        if(userId !== prevUserId) {\n\n            socket.off(\"feedPostUpdate\");\n            socket.off(\"feedPostCommentUpdate\");\n            socket.off(\"friendRequestUpdate\");\n            socket.off(\"friendAcceptUpdate\");\n\n            if(!userId) {\n\n                socket.on(\"feedPostUpdate\", () => {\n                \n                    axios.get(localUrl + \"/feed/\" + \"currentUser\", {headers: {Authorization: `Bearer ${token}`}})\n                    .then(response => {\n                        \n                        this.setState({\n                            feed: response.data\n                        })\n                    })\n                })\n                \n                socket.on(\"feedPostCommentUpdate\", () => {\n                    axios.get(localUrl + \"/comments/feedComments/\"  + \"currentUser\", {headers: {Authorization: `Bearer ${token}`}})\n                    .then(response => {\n                        \n                        this.setState({\n                            feedComments: response.data\n                        })\n                    })\n                })\n\n                socket.on(\"friendRequestUpdate\", () => {\n                    axios.get(localUrl + \"/requests\", {headers: {Authorization: `Bearer ${token}`}})\n                    .then(response => {\n                        \n                        this.setState({\n                            requests: response.data\n                        })\n                    })\n                })\n    \n                axios.get(localUrl + \"/users\", {headers: {Authorization: `Bearer ${token}`}})\n                .then(response => {\n                    \n                    userId = response.data.userId;\n                    console.log(userId)\n    \n                    this.setState({\n                        currentUser: response.data,\n                        profileInfo: response.data,\n                        currentIsProfile: true\n                    }, () => {\n                        console.log(this.state.currentUser)\n                    })\n    \n                    return axios.all([\n                        axios.get(localUrl + \"/favourites\", {headers: {Authorization: `Bearer ${token}`}}),\n                        axios.get(localUrl + \"/friends\", {headers: {Authorization: `Bearer ${token}`}}),\n                        axios.get(localUrl + \"/requests\", {headers: {Authorization: `Bearer ${token}`}}),\n                        axios.get(localUrl + \"/feed/\" + \"currentUser\", {headers: {Authorization: `Bearer ${token}`}}),\n                        axios.get(localUrl + \"/comments/feedComments/\" + \"currentUser\", {headers: {Authorization: `Bearer ${token}`}})\n                    ])\n                })\n                .then(axios.spread((favouritesResponse, friendsResponse, requestsResponse, feedResponse, feedCommentsResponse)=> {\n                    console.log(favouritesResponse, friendsResponse, feedResponse, feedCommentsResponse)\n                    if(favouritesResponse.data){\n                        this.setState({\n                            favouriteTeams: favouritesResponse.data,\n                            friends: friendsResponse.data,\n                            requests: requestsResponse.data,\n                            feed: feedResponse.data,\n                            feedComments: feedCommentsResponse.data,\n                            isFriend: true\n                        }, () => console.log(\"yess\"))\n                    }\n                    else {\n                        this.setState({\n                            friends: friendsResponse.data,\n                            requests: requestsResponse.data,\n                            feed: feedResponse.data,\n                            feedComments: feedCommentsResponse.data,\n                            isFriend: true\n                        },() =>  console.log(\"yess\"))\n                        \n                    } \n                }))\n                .catch(error => {\n                    console.log(error)\n                })\n            }\n            else {\n\n                socket.on(\"feedPostUpdate\", () => {\n                \n                    axios.get(localUrl + \"/feed/\" + userId, {headers: {Authorization: `Bearer ${token}`}})\n                    .then(response => {\n                        \n                        this.setState({\n                            feed: response.data\n                        })\n                    })\n                });\n\n                socket.on(\"feedPostCommentUpdate\", () => {\n                    axios.get(localUrl + \"/comments/feedComments/\"  + userId, {headers: {Authorization: `Bearer ${token}`}})\n                    .then(response => {\n                        \n                        this.setState({\n                            feedComments: response.data\n                        })\n                    })\n                });\n\n                socket.on(\"friendAcceptUpdate\", () => {\n                    console.log(\"it is working\");\n                    axios.all([\n                        axios.get(localUrl + \"/friends/isFriend/\" + userId, {headers: {Authorization: `Bearer ${token}`}}),\n                        axios.get(localUrl + \"/friends/\" + userId, {headers: {Authorization: `Bearer ${token}`}})\n                    ])\n                    .then(axios.spread((isFriendResponse, friendsResponse) => {\n                        console.log(isFriendResponse.data, friendsResponse.data)\n                        this.setState({\n                            isFriend: isFriendResponse.data,\n                            friends: friendsResponse.data\n                        })\n                    }))\n                });\n\n                axios.all([\n                    axios.get(localUrl + \"/favourites/user/\" + userId, {headers: {Authorization: `Bearer ${token}`}}),\n                    axios.get(localUrl + \"/users/\" + userId, {headers: {Authorization: `Bearer ${token}`}}),\n                    axios.get(localUrl + \"/users\", {headers: {Authorization: `Bearer ${token}`}}),\n                    axios.get(localUrl + \"/friends/\" + userId, {headers: {Authorization: `Bearer ${token}`}}),\n                    axios.get(localUrl + \"/feed/\" + userId, {headers: {Authorization: `Bearer ${token}`}}),\n                    axios.get(localUrl + \"/comments/feedComments/\" + userId, {headers: {Authorization: `Bearer ${token}`}})\n                ])\n                .then(axios.spread((favouritesResponse, profileResponse, currentUserResponse, \n                    friendsResponse, feedResponse, feedCommentsResponse)=> {\n                    if(favouritesResponse.data){\n                        this.setState({\n                            favouriteTeams: favouritesResponse.data,\n                            currentUser: currentUserResponse.data,\n                            profileInfo: profileResponse.data,\n                            currentIsProfile: false,\n                            friends: friendsResponse.data,\n                            feed: feedResponse.data,\n                            feedComments: feedCommentsResponse.data,\n                        })\n                    }\n                    else {\n                        this.setState({\n                            currentUser: currentUserResponse.data,\n                            profileInfo: profileResponse.data,\n                            currentIsProfile: false,\n                            friends: friendsResponse.data,\n                            feed: feedResponse.data,\n                            feedComments: feedCommentsResponse.data,\n                        })\n                        \n                    } \n                \n                    return axios.all([\n                        axios.get(localUrl + \"/friends/isFriend/\" + userId, {headers: {Authorization: `Bearer ${token}`}}),\n                        axios.get(localUrl + \"/requests/isRequestSent/\" + userId, {headers: {Authorization: `Bearer ${token}`}}),\n                        axios.get(localUrl + \"/requests/isRequestReceived/\" + userId, {headers: {Authorization: `Bearer ${token}`}})\n                    ])\n                }))\n                .then(axios.spread((isFriendResponse, isSentResponse, isRecievedResponse) => {\n        \n                    this.setState({\n                        isFriend: isFriendResponse.data.isFriend,\n                        isRequestSent: isSentResponse.data.isRequestSent,\n                        isRequestReceived: isRecievedResponse.data.isRequestReceived\n                    })\n                }))\n                .catch(error => {\n                    console.log(error)\n                })\n            }\n        } \n    }\n\n    componentWillUnmount() {\n\n        socket.off(\"feedPostUpdate\");\n        socket.off(\"feedPostCommentUpdate\");\n        socket.off(\"friendRequestUpdate\");\n        socket.off(\"friendAcceptUpdate\");\n    }\n\n    taskDisplayTeam = (teamId) => {\n        axios.get(\"https://www.thesportsdb.com/api/v1/json/40130162/lookupteam.php?id=\" + teamId)\n        .then(response => {\n            const selectedTeam = response.data.teams[0];\n\n            this.setState({\n                selectedTeam: selectedTeam,\n                detailsEnabled: true\n            })\n        })\n    }\n\n    taskEndDisplayTeam = () => {\n        \n        this.setState({\n            detailsEnabled: false\n        })\n    }\n\n    taskUpdateFavourites = () => {\n\n        const token = sessionStorage.getItem(\"token\");\n\n        axios.get(localUrl + \"/favourites\", {headers: {Authorization: `Bearer ${token}`}})\n        .then(response => {\n            \n            if(response.data){\n                this.setState({\n                    favouriteTeams: response.data\n                })\n            }\n            else {\n                this.setState({\n                    favouriteTeams: []\n                })\n            } \n\n        })\n    }\n\n    taskSendFriendRequest = () => {\n\n        const {profileInfo} = this.state;\n\n        const token = sessionStorage.getItem(\"token\");\n        const userId = profileInfo.userId;\n\n        axios.post(localUrl + '/requests', {userId}, {headers: {Authorization: `Bearer ${token}`}})\n        .then(_response => {\n            \n            this.setState({\n                isRequestSent: true\n            }, () => {\n\n                socket.emit(\"friendRequest\");\n            })\n        })\n    }\n\n    taskAcceptFriendRequest = () => {\n\n        const {profileInfo} = this.state;\n\n        const token = sessionStorage.getItem(\"token\");\n        const requestorId = profileInfo.userId;\n        \n\n        axios.post(localUrl + '/requests/acceptRequest', {requestorId}, {headers: {Authorization: `Bearer ${token}`}})\n        .then(_response => {\n\n            return axios.all([\n                axios.get(localUrl + \"/friends/\" + requestorId, {headers: {Authorization: `Bearer ${token}`}}),\n                axios.get(localUrl + \"/requests/\" + requestorId, {headers: {Authorization: `Bearer ${token}`}}),\n            ])\n            .then(axios.spread((friendsResponse, requestResponse) => {\n\n                this.setState({\n                    isFriend: true,\n                    friends: friendsResponse.data,\n                    requests: requestResponse.data\n                }, () => {\n    \n                    socket.emit(\"friendAccept\");\n                })\n\n            }))\n        })\n    }\n\n    taskAddPost = (event) => {\n\n        event.preventDefault();\n\n        const {profileInfo} = this.state;\n    \n        const token = sessionStorage.getItem(\"token\");\n\n        const commentText = event.target.commentText.value;\n        const contentType = \"comment\";\n        const userId = profileInfo.userId;\n        \n        const commentData = {\n            userId, \n            commentText, \n            contentType\n        }\n        \n        axios.post(localUrl + \"/feed\", commentData, {headers: {Authorization: `Bearer ${token}`}})\n        .then(response => {\n            this.setState({\n                feed: response.data\n            }, () => {\n                event.target.reset();\n\n                socket.emit(\"feedPost\", {feed: response.data});\n            })\n        })\n\n    }\n\n    taskAddCommentToPost = (event) => {\n\n        event.preventDefault();\n\n        const {profileInfo} = this.state;\n\n        const token = sessionStorage.getItem(\"token\");\n        const userId = profileInfo.userId;\n\n        const commentText = event.target.commentText.value;\n        const contentId = event.target.contentId.value;\n        const contentType = event.target.contentType.value;\n        const receiverId = event.target.receiverId.value;\n\n        const feedCommentData = {\n            contentId, \n            contentType, \n            commentText, \n            receiverId\n        }\n\n        axios.post(localUrl + \"/comments\", feedCommentData, {headers: {Authorization: `Bearer ${token}`}})\n        .then(_response => {\n\n            return axios.get(localUrl + \"/comments/feedComments/\" + userId, {headers: {Authorization: `Bearer ${token}`}})\n        })\n        .then(response => {\n\n            this.setState({\n                feedComments: response.data\n            }, () => {\n\n                event.target.reset();\n                socket.emit(\"feedPostComment\", {feedComments: response.data})\n            })\n        })\n    }\n\n    taskTakeToGamePage = (idEvent) => {\n\n        this.props.history.push('/game/' + idEvent);\n    }\n\n    render () {\n\n        const {favouriteTeams, selectedTeam, detailsEnabled, \n            pastEvents, articles, profileInfo, currentUser, currentIsProfile, friends, requests, isFriend, \n            isRequestSent, isRequestReceived, feed, feedComments} = this.state;\n\n        return(\n            <main className=\"user\">\n                <div className=\"user__profile user-profile\">\n                    <Avatar \n                        className=\"user-profile__avatar\" \n                        avatarUrl={profileInfo.imgUrl} \n                    />\n                    <div className=\"user-profile__info\">\n                        <h3 className=\"profile__name\">{profileInfo.name} {profileInfo.lastName}</h3>\n                        <p className=\"profile__date\">Joined {timeDifference(profileInfo.timestamp)}</p>\n                        <p className=\"profile__description\">{profileInfo.description}</p>\n                        <div className=\"profile__location-container\">\n                            <img className=\"profile__location-icon\" src={homeIcon} alt=\"location\"/>\n                            <p className=\"profile__location\">Lives in <span className=\"profile__bold\">{profileInfo.location}</span></p>\n                        </div> \n                        <div className=\"profile__location-container\">\n                            <img className=\"profile__location-icon\" src={locationIcon} alt=\"location\"/>\n                            <p className=\"profile__location\">From <span className=\"profile__bold\">{profileInfo.from}</span></p>\n                        </div>\n                        {!currentIsProfile && \n                            <div className=\"user-profile__info-buttons\">\n                                {isFriend === null\n                                    ?\n                                    <div></div>\n                                    :\n                                    <IsFriend \n                                        className=\"\"\n                                        isFriend={isFriend}\n                                        isRequestSent={isRequestSent}\n                                        isRequestReceived={isRequestReceived}\n                                        taskSendFriendRequest={this.taskSendFriendRequest}\n                                        taskAcceptFriendRequest={this.taskAcceptFriendRequest}\n                                    />\n                                }\n                            </div>\n                        }\n                    </div>\n                </div>\n                {isFriend === null\n                    ?\n                    <div></div>\n                    :\n                    (isFriend === true\n                        ?\n                        <div className=\"user__profile-details\">\n                            <div className=\"user__interaction user-interaction\">\n                                <div className=\"interaction__favourites\">\n                                    {favouriteTeams.map(team => {\n                                        return (\n                                            <TeamCard \n                                                className=\"user-interaction__fav-card\" \n                                                taskDisplayTeam={this.taskDisplayTeam}\n                                                strTeamBadge={team.strTeamBadge}\n                                                teamId={team.idTeam} \n                                            />\n                                        )\n                                    })} \n                                </div>\n                                <div className=\"user-interaction__feed-container\">\n                                    <div className=\"user-interaction__feed feed\">\n                                        <div className=\"feed__card\">\n                                            {currentIsProfile\n                                            ?\n                                            <FeedForm \n                                                className=\"feed__form\"\n                                                onSubmit={this.taskAddPost}\n                                                profileUrl={currentUser.imgUrl}\n                                                feedTitle={`${profileInfo.name}'s Feed`}\n                                                placeholder={`What is on your mind?`}\n                                            />\n                                            :\n                                            <FeedForm \n                                                className=\"feed__form\"\n                                                onSubmit={this.taskAddPost}\n                                                profileUrl={currentUser.imgUrl}\n                                                feedTitle={`${profileInfo.name}'s Feed`}\n                                                placeholder={`Write something to ${profileInfo.name}...`}\n                                            />\n                                            }\n                                        </div>\n                                        {feed.map(feedContent => {\n                                            return (\n                                                <FeedCard \n                                                    className=\"feed__card\"\n                                                    feedContent={feedContent}\n                                                    feedComments={feedComments}\n                                                    taskTakeToGamePage={this.taskTakeToGamePage}\n                                                    taskAddCommentToPost={this.taskAddCommentToPost}\n                                                    userAvatar={currentUser.imgUrl}\n                                                />\n                                            )\n                                        })}\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"user__updates user-updates\">\n                                <div className=\"user-updates__container\">\n                                    {pastEvents.map(event => {\n                                        return <EventScore event={event} />\n                                    })}\n                                </div>\n                                <div className=\"user-updates__container\">\n                                    {articles.map(article => {\n                                        return (\n                                            <NewsArticle \n                                                className=\"team__news-article\" \n                                                newsArticle={article} \n                                            />\n                                        )\n                                    })}\n                                </div>\n                            </div>\n                            <div className=\"user__friends user-friends\">\n                                <div className=\"user-friends__wrapper\">\n                                    <div className=\"user-friends__container\">\n                                        <h3 className=\"friends__title\">Friends</h3>\n                                        {friends.map(friend => {\n                                            return(\n                                                <Link key={friend.friendId} to={\"/user/\" + friend.friendId}>\n                                                    <ProfileImage \n                                                        className=\"friends__avatar\"\n                                                        imgSrc={friend.imgUrl}\n                                                    />\n                                                </Link>\n                                            )\n                                        })}\n                                    </div>\n                                    <div className=\"friends__request-container\">\n                                        <h3 className=\"friends__title\">Requests</h3>\n                                        {requests.map(request => {\n                                            return(\n                                                <Link key={request.requestorId} to={\"/user/\" + request.requestorId}>\n                                                    <ProfileImage \n                                                        key={request.requestorId}\n                                                        className=\"friends__avatar\"\n                                                        imgSrc={request.imgUrl}\n                                                    />\n                                                </Link>\n                                            )\n                                        })}\n                                    </div>\n                                </div>\n                            </div>\n                            {detailsEnabled && \n                                <TeamDetails \n                                    team={selectedTeam} \n                                    taskEndDisplayTeam={this.taskEndDisplayTeam}\n                                    taskUpdateFavourites={this.taskUpdateFavourites}\n                                />\n                            }\n                        </div>\n                        :\n                        <div className=\"user__private user-private\">\n                            <div className=\"user-private__wrapper\">\n                                <img className=\"user-private__img\" src={lockIcon} alt=\"lock\"/>\n                                <div className=\"user-private__card\">    \n                                    <h3 className=\"user-private__title\">This Account is Private</h3>\n                                    <p className=\"user-private__text\">Send a friend request to this account to see their details.</p>\n                                </div>\n                            </div>\n                        </div>\n                    )\n                }\n                \n                \n            </main>\n        )\n    }\n    \n}\n\nexport default ActualUserPage;",{"ruleId":"175","replacedBy":"176"},{"ruleId":"177","replacedBy":"178"},{"ruleId":"179","severity":1,"message":"180","line":9,"column":8,"nodeType":"181","messageId":"182","endLine":9,"endColumn":16},{"ruleId":"179","severity":1,"message":"183","line":10,"column":8,"nodeType":"181","messageId":"182","endLine":10,"endColumn":16},{"ruleId":"184","severity":1,"message":"185","line":16,"column":13,"nodeType":"186","endLine":16,"endColumn":113},{"ruleId":"187","severity":1,"message":"188","line":25,"column":29,"nodeType":"189","messageId":"190","endLine":25,"endColumn":43},{"ruleId":"179","severity":1,"message":"191","line":2,"column":9,"nodeType":"181","messageId":"182","endLine":2,"endColumn":13},{"ruleId":"192","severity":1,"message":"193","line":9,"column":9,"nodeType":"186","messageId":"194","endLine":9,"endColumn":39,"fix":"195"},{"ruleId":"184","severity":1,"message":"185","line":17,"column":17,"nodeType":"186","endLine":17,"endColumn":137},{"ruleId":"179","severity":1,"message":"196","line":9,"column":51,"nodeType":"181","messageId":"182","endLine":9,"endColumn":63},{"ruleId":"179","severity":1,"message":"197","line":9,"column":65,"nodeType":"181","messageId":"182","endLine":9,"endColumn":77},{"ruleId":"179","severity":1,"message":"198","line":19,"column":8,"nodeType":"181","messageId":"182","endLine":19,"endColumn":20},{"ruleId":"179","severity":1,"message":"199","line":21,"column":7,"nodeType":"181","messageId":"182","endLine":21,"endColumn":15},{"ruleId":"200","severity":1,"message":"201","line":51,"column":43,"nodeType":"202","messageId":"203","endLine":51,"endColumn":44},{"ruleId":"200","severity":1,"message":"201","line":52,"column":60,"nodeType":"202","messageId":"203","endLine":52,"endColumn":61},{"ruleId":"200","severity":1,"message":"201","line":211,"column":67,"nodeType":"202","messageId":"203","endLine":211,"endColumn":68},{"ruleId":"187","severity":1,"message":"188","line":25,"column":29,"nodeType":"189","messageId":"190","endLine":25,"endColumn":47},{"ruleId":"179","severity":1,"message":"204","line":17,"column":18,"nodeType":"181","messageId":"182","endLine":17,"endColumn":26},{"ruleId":"179","severity":1,"message":"196","line":17,"column":28,"nodeType":"181","messageId":"182","endLine":17,"endColumn":40},{"ruleId":"179","severity":1,"message":"197","line":17,"column":42,"nodeType":"181","messageId":"182","endLine":17,"endColumn":54},{"ruleId":"179","severity":1,"message":"199","line":24,"column":7,"nodeType":"181","messageId":"182","endLine":24,"endColumn":15},{"ruleId":"200","severity":1,"message":"201","line":68,"column":47,"nodeType":"202","messageId":"203","endLine":68,"endColumn":48},{"ruleId":"200","severity":1,"message":"201","line":78,"column":65,"nodeType":"202","messageId":"203","endLine":78,"endColumn":66},{"ruleId":"200","severity":1,"message":"201","line":115,"column":51,"nodeType":"202","messageId":"203","endLine":115,"endColumn":52},{"ruleId":"200","severity":1,"message":"201","line":116,"column":68,"nodeType":"202","messageId":"203","endLine":116,"endColumn":69},{"ruleId":"200","severity":1,"message":"201","line":267,"column":51,"nodeType":"202","messageId":"203","endLine":267,"endColumn":52},{"ruleId":"200","severity":1,"message":"201","line":277,"column":69,"nodeType":"202","messageId":"203","endLine":277,"endColumn":70},{"ruleId":"205","severity":1,"message":"206","line":299,"column":21,"nodeType":"181","messageId":"207","endLine":299,"endColumn":27},{"ruleId":"200","severity":1,"message":"201","line":314,"column":55,"nodeType":"202","messageId":"203","endLine":314,"endColumn":56},{"ruleId":"200","severity":1,"message":"201","line":315,"column":72,"nodeType":"202","messageId":"203","endLine":315,"endColumn":73},"no-native-reassign",["208"],"no-negated-in-lhs",["209"],"no-unused-vars","'HomePage' is defined but never used.","Identifier","unusedVar","'UserPage' is defined but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'Link' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","noTargetBlank",{"range":"210","text":"211"},"'intHomeScore' is assigned a value but never used.","'intAwayScore' is assigned a value but never used.","'getTeamNames' is defined but never used.","'API__KEY' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'strEvent' is assigned a value but never used.","no-const-assign","'userId' is constant.","const","no-global-assign","no-unsafe-negation",[220,220]," rel=\"noreferrer\""]