{"ast":null,"code":"var _jsxFileName = \"/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/pages/GamePage/GamePage.js\";\nimport './GamePage.scss';\nimport React from 'react';\nimport axios from 'axios';\nimport io from 'socket.io-client';\nimport VideoMain from '../../components/VideoMain/VideoMain';\nimport VideoInfo from '../../components/VideoInfo/VideoInfo';\nimport VideoBox from '../../components/VideoBox/VideoBox';\nimport ContentShare from '../../components/ContentShare/ContentShare';\nimport videoWatchToEmbed from '../../functions/videoWatchToEmbed';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst localUrl = \"http://localhost:8686\";\nlet socket;\n\nclass GamePage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      index: 0,\n      strVideo: \"\",\n      currentEvent: {},\n      pastLeagueEvents: [],\n      videoComments: [],\n      currentUser: {},\n      videoShare: false,\n      videoSharePost: false,\n      friends: [],\n      filteredFriends: [],\n      selectedFriend: {},\n      searchedValue: \"\"\n    };\n\n    this.taskSubmitComment = event => {\n      event.preventDefault();\n      const commentText = event.target.comment.value;\n      const contentType = \"game\";\n      const contentId = this.props.match.params.videoId;\n      const token = sessionStorage.getItem(\"token\");\n      const commentData = {\n        contentId,\n        contentType,\n        commentText\n      };\n      axios.post(localUrl + \"/comments\", commentData, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }).then(_response => {\n        return axios.get(localUrl + \"/comments/\" + contentType + \"/\" + contentId, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n      }).then(response => {\n        this.setState({\n          videoComments: response.data\n        }, () => {\n          socket.emit('gameComment', {\n            videoComments: response.data\n          });\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n      event.target.reset();\n    };\n\n    this.taskChangeVideo = (videoId, _videoSrc) => {\n      this.props.history.push('/game/' + videoId);\n    };\n\n    this.taskShareVideo = () => {\n      this.setState({\n        videoShare: true\n      });\n    };\n\n    this.taskEnableVideoPost = friend => {\n      this.setState({\n        videoSharePost: true,\n        selectedFriend: friend\n      });\n    };\n\n    this.taskCancelVideoShare = () => {\n      this.setState({\n        videoShare: false,\n        videoSharePost: false\n      });\n    };\n\n    this.taskBackToPrevious = () => {\n      this.setState({\n        videoSharePost: false\n      });\n    };\n\n    this.taskFilterFriends = event => {\n      const {\n        name,\n        value\n      } = event.target;\n      this.setState({\n        [name]: value\n      }, () => {\n        const {\n          searchedValue,\n          friends\n        } = this.state;\n        const filteredFriends = friends.filter(friend => {\n          const friendName = friend.friendName.toLowerCase();\n          const searched = searchedValue.toLowerCase();\n\n          if (friendName.includes(searched)) {\n            return true;\n          }\n\n          return false;\n        });\n        this.setState({\n          filteredFriends: filteredFriends\n        });\n      });\n    };\n\n    this.taskSubmitSharePost = event => {\n      event.preventDefault();\n      const token = sessionStorage.getItem(\"token\");\n      const commentText = event.target.post.value;\n      const {\n        currentEvent,\n        selectedFriend\n      } = this.state;\n      const VideoPostData = {\n        userId: selectedFriend.friendId,\n        commentText,\n        contentType: \"video\",\n        idEvent: currentEvent.idEvent,\n        strEvent: currentEvent.strEvent,\n        intHomeScore: currentEvent.intHomeScore,\n        intAwayScore: currentEvent.intAwayScore,\n        strVideo: currentEvent.strVideo\n      };\n      axios.post(localUrl + \"/feed\", VideoPostData, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }).then(_response => {\n        event.target.reset();\n        const {\n          friends\n        } = this.state;\n        this.setState({\n          videoShare: false,\n          videoSharePost: false,\n          filteredFriends: friends,\n          selectedFriend: {},\n          searchedValue: \"\"\n        });\n      });\n    };\n  }\n\n  componentDidMount(prevProps, _prevState) {\n    const url = this.props.match.url;\n    const previousUrl = prevProps && prevProps.match.url;\n\n    if (url !== previousUrl) {\n      this.props.taskUpdateUrl(this.props.match.url);\n    }\n\n    const token = sessionStorage.getItem(\"token\");\n    const videoId = this.props.match.params.videoId;\n    socket = io.connect('localhost:8686');\n    socket.on('gameCommentUpdates', ({\n      videoComments\n    }) => {\n      axios.get(localUrl + \"/comments/game/\" + videoId, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }).then(response => {\n        this.setState({\n          videoComments: response.data\n        });\n      });\n    });\n    axios.all([axios.get(\"https://www.thesportsdb.com/api/v1/json/40130162/lookupevent.php?id=\" + videoId), axios.get(localUrl + \"/comments/game/\" + videoId, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }), axios.get(localUrl + \"/users\", {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }), axios.get(localUrl + \"/friends\", {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    })]).then(axios.spread((responseEvent, responseComments, responseUsers, responseFriends) => {\n      const currentEvent = responseEvent.data.events[0];\n      const videoComments = responseComments.data;\n      const strVideo = currentEvent.strVideo && videoWatchToEmbed(currentEvent.strVideo);\n      const leagueId = currentEvent.idLeague;\n      const currentUser = responseUsers.data;\n      const friends = responseFriends.data;\n\n      if (videoComments) {\n        this.setState({\n          strVideo: strVideo,\n          currentEvent: currentEvent,\n          videoComments: videoComments,\n          currentUser: currentUser,\n          friends: friends,\n          filteredFriends: friends\n        });\n      } else {\n        this.setState({\n          strVideo: strVideo,\n          currentEvent: currentEvent,\n          currentUser: currentUser,\n          friends: friends,\n          filteredFriends: friends\n        });\n      }\n\n      return axios.get(\"https://www.thesportsdb.com/api/v1/json/40130162/eventspastleague.php?id=\" + leagueId);\n    })).then(response => {\n      const pastLeagueEvents = response.data.events;\n      this.setState({\n        pastLeagueEvents: pastLeagueEvents\n      });\n    });\n  }\n\n  componentDidUpdate(prevProps, _prevState) {\n    const url = this.props.match.url;\n    const previousUrl = prevProps && prevProps.match.url;\n\n    if (url !== previousUrl) {\n      this.props.taskUpdateUrl(this.props.match.url);\n    }\n\n    const videoId = this.props.match.params.videoId;\n    const prevVideoId = prevProps.match.params.videoId;\n\n    if (videoId !== prevVideoId) {\n      const token = sessionStorage.getItem(\"token\");\n      axios.all([axios.get(\"https://www.thesportsdb.com/api/v1/json/40130162/lookupevent.php?id=\" + videoId), axios.get(localUrl + \"/comments/game/\" + videoId, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      })]).then(axios.spread((responseEvent, responseComments) => {\n        const currentEvent = responseEvent.data.events[0];\n        const videoComments = responseComments.data;\n        const strVideo = currentEvent.strVideo && videoWatchToEmbed(currentEvent.strVideo);\n        const leagueId = currentEvent.idLeague;\n\n        if (videoComments) {\n          this.setState({\n            strVideo: strVideo,\n            currentEvent: currentEvent,\n            videoComments: videoComments\n          });\n        } else {\n          this.setState({\n            strVideo: strVideo,\n            currentEvent: currentEvent\n          });\n        }\n\n        return axios.get(\"https://www.thesportsdb.com/api/v1/json/40130162/eventspastleague.php?id=\" + leagueId);\n      })).then(response => {\n        let pastLeagueEvents = response.data.events;\n        pastLeagueEvents = pastLeagueEvents.filter(event => {\n          if (event.idEvent === videoId) {\n            return false;\n          }\n\n          return true;\n        });\n        this.setState({\n          pastLeagueEvents: pastLeagueEvents\n        });\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    socket.off('gameCommentUpdates');\n  }\n\n  render() {\n    const {\n      strVideo,\n      currentEvent,\n      pastLeagueEvents,\n      videoComments,\n      currentUser,\n      videoShare,\n      videoSharePost,\n      searchedValue,\n      filteredFriends,\n      selectedFriend\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(VideoMain, {\n        className: \"game__video\",\n        videoSrc: strVideo,\n        videoName: currentEvent.strFilename\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"game__info\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"game__info-wrapper\",\n          children: [/*#__PURE__*/_jsxDEV(VideoInfo, {\n            className: \"game__video-info\",\n            currentEvent: currentEvent,\n            currentUser: currentUser,\n            comments: videoComments,\n            taskSubmitComment: this.taskSubmitComment,\n            taskShareVideo: this.taskShareVideo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"game__side-videos-container\",\n            children: pastLeagueEvents.map(event => {\n              return /*#__PURE__*/_jsxDEV(VideoBox, {\n                className: \"game__side-video\",\n                videoSrc: event.strVideo,\n                videoName: event.strFilename,\n                videoId: event.idEvent,\n                onClick: this.taskChangeVideo\n              }, event.idEvent, false, {\n                fileName: _jsxFileName,\n                lineNumber: 340,\n                columnNumber: 37\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 17\n      }, this), videoShare && /*#__PURE__*/_jsxDEV(ContentShare, {\n        className: \"game__videoshare\",\n        currentUser: currentUser,\n        taskCancelContentShare: this.taskCancelVideoShare,\n        taskFilterFriends: this.taskFilterFriends,\n        taskBackToPrevious: this.taskBackToPrevious,\n        taskEnableVideoPost: this.taskEnableVideoPost,\n        taskSubmitSharePost: this.taskSubmitSharePost,\n        videoSharePost: videoSharePost,\n        searchedValue: searchedValue,\n        friends: filteredFriends,\n        selectedFriend: selectedFriend\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default GamePage;","map":{"version":3,"sources":["/Users/cemakcevin/Desktop/Cem/Code/BrainStation/cem-akcevin-capstone/sportify/client/src/pages/GamePage/GamePage.js"],"names":["React","axios","io","VideoMain","VideoInfo","VideoBox","ContentShare","videoWatchToEmbed","localUrl","socket","GamePage","Component","state","index","strVideo","currentEvent","pastLeagueEvents","videoComments","currentUser","videoShare","videoSharePost","friends","filteredFriends","selectedFriend","searchedValue","taskSubmitComment","event","preventDefault","commentText","target","comment","value","contentType","contentId","props","match","params","videoId","token","sessionStorage","getItem","commentData","post","headers","Authorization","then","_response","get","response","setState","data","emit","catch","error","console","log","reset","taskChangeVideo","_videoSrc","history","push","taskShareVideo","taskEnableVideoPost","friend","taskCancelVideoShare","taskBackToPrevious","taskFilterFriends","name","filter","friendName","toLowerCase","searched","includes","taskSubmitSharePost","VideoPostData","userId","friendId","idEvent","strEvent","intHomeScore","intAwayScore","componentDidMount","prevProps","_prevState","url","previousUrl","taskUpdateUrl","connect","on","all","spread","responseEvent","responseComments","responseUsers","responseFriends","events","leagueId","idLeague","componentDidUpdate","prevVideoId","componentWillUnmount","off","render","strFilename","map"],"mappings":"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","sourcesContent":["import './GamePage.scss';\nimport React from 'react';\nimport axios from 'axios';\nimport io from 'socket.io-client';\n\nimport VideoMain from '../../components/VideoMain/VideoMain';\nimport VideoInfo from '../../components/VideoInfo/VideoInfo';\nimport VideoBox from '../../components/VideoBox/VideoBox';\nimport ContentShare from '../../components/ContentShare/ContentShare';\n\nimport videoWatchToEmbed from '../../functions/videoWatchToEmbed';\n\nconst localUrl = \"http://localhost:8686\";\nlet socket;\n\nclass GamePage extends React.Component {\n\n    state = {\n        index: 0,\n        strVideo: \"\",\n        currentEvent: {},\n        pastLeagueEvents: [],\n        videoComments:[],\n        currentUser: {},\n        videoShare: false,\n        videoSharePost: false,\n        friends: [],\n        filteredFriends: [],\n        selectedFriend: {},\n        searchedValue: \"\"\n    }\n\n    componentDidMount(prevProps, _prevState) {\n\n        const url = this.props.match.url;\n        const previousUrl = prevProps && prevProps.match.url;\n\n        if(url !== previousUrl) {\n            this.props.taskUpdateUrl(this.props.match.url);\n        }\n\n        const token = sessionStorage.getItem(\"token\");\n        const videoId = this.props.match.params.videoId;\n        \n        socket = io.connect('localhost:8686');\n        socket.on('gameCommentUpdates', ({videoComments}) => {\n        \n            axios.get(localUrl + \"/comments/game/\" + videoId, {headers: {Authorization: `Bearer ${token}`}})\n            .then(response => {\n                this.setState({\n                    videoComments: response.data\n                })\n            })\n            \n        })\n\n\n        axios.all([\n            axios.get(\"https://www.thesportsdb.com/api/v1/json/40130162/lookupevent.php?id=\" + videoId),\n            axios.get(localUrl + \"/comments/game/\" + videoId, {headers: {Authorization: `Bearer ${token}`}}),   \n            axios.get(localUrl + \"/users\", {headers: {Authorization: `Bearer ${token}`}}),\n            axios.get(localUrl + \"/friends\", {headers: {Authorization: `Bearer ${token}`}}) \n        ])\n        .then(axios.spread((responseEvent, responseComments, responseUsers, responseFriends) => {\n            \n            const currentEvent = responseEvent.data.events[0];\n            const videoComments = responseComments.data;\n            const strVideo = currentEvent.strVideo && videoWatchToEmbed(currentEvent.strVideo)\n            const leagueId = currentEvent.idLeague;\n            const currentUser = responseUsers.data;\n            const friends = responseFriends.data;\n\n            if(videoComments) {\n                this.setState({\n                    strVideo: strVideo,\n                    currentEvent: currentEvent,\n                    videoComments: videoComments,\n                    currentUser: currentUser,\n                    friends: friends,\n                    filteredFriends: friends\n                })\n            }\n            else {\n                this.setState({\n                    strVideo: strVideo,\n                    currentEvent: currentEvent,\n                    currentUser: currentUser,\n                    friends: friends,\n                    filteredFriends: friends\n                })\n            }\n            \n\n            return axios.get(\"https://www.thesportsdb.com/api/v1/json/40130162/eventspastleague.php?id=\" + leagueId)\n        }))\n        .then(response => {\n            const pastLeagueEvents = response.data.events;\n\n            this.setState({\n                pastLeagueEvents: pastLeagueEvents\n            })\n        })\n    }\n\n    componentDidUpdate(prevProps, _prevState) {\n\n        const url = this.props.match.url;\n        const previousUrl = prevProps && prevProps.match.url;\n\n        if(url !== previousUrl) {\n            this.props.taskUpdateUrl(this.props.match.url);\n        }\n\n        const videoId = this.props.match.params.videoId;\n        const prevVideoId = prevProps.match.params.videoId;\n\n        if(videoId !== prevVideoId) {\n            \n            const token = sessionStorage.getItem(\"token\");\n\n            axios.all([\n                axios.get(\"https://www.thesportsdb.com/api/v1/json/40130162/lookupevent.php?id=\" + videoId),\n                axios.get(localUrl + \"/comments/game/\" + videoId, {headers: {Authorization: `Bearer ${token}`}})   \n            ])\n            .then(axios.spread((responseEvent, responseComments) => {\n                \n                const currentEvent = responseEvent.data.events[0];\n                const videoComments = responseComments.data;\n                const strVideo = currentEvent.strVideo && videoWatchToEmbed(currentEvent.strVideo)\n                const leagueId = currentEvent.idLeague;\n    \n                if(videoComments) {\n                    this.setState({\n                        strVideo: strVideo,\n                        currentEvent: currentEvent,\n                        videoComments: videoComments\n                    })\n                }\n                else {\n                    this.setState({\n                        strVideo: strVideo,\n                        currentEvent: currentEvent,\n                    })\n                }\n                \n    \n                return axios.get(\"https://www.thesportsdb.com/api/v1/json/40130162/eventspastleague.php?id=\" + leagueId)\n            }))\n            .then(response => {\n                let pastLeagueEvents = response.data.events;\n    \n                pastLeagueEvents = pastLeagueEvents.filter(event => {\n\n                    if(event.idEvent === videoId) {\n                        return false;\n                    }\n\n                    return true;\n                })\n\n                this.setState({\n                    pastLeagueEvents: pastLeagueEvents\n                })\n            })\n        }\n\n        \n    }\n\n    componentWillUnmount() {\n        socket.off('gameCommentUpdates');\n    }\n\n    taskSubmitComment = (event) => {\n\n        event.preventDefault();\n\n        const commentText = event.target.comment.value;\n        const contentType = \"game\";\n        const contentId = this.props.match.params.videoId;\n        const token = sessionStorage.getItem(\"token\");\n\n        const commentData = {\n            contentId,\n            contentType,\n            commentText\n        }\n\n        axios.post(localUrl + \"/comments\", commentData, {headers: {Authorization: `Bearer ${token}`}})\n        .then(_response => {\n            \n            return axios.get(localUrl + \"/comments/\" + contentType + \"/\" + contentId, {headers: {Authorization: `Bearer ${token}`}})\n        })\n        .then(response => {\n\n            this.setState({\n                videoComments: response.data\n            }, () => {\n\n                socket.emit('gameComment', {videoComments: response.data});\n                \n            })\n        })\n        .catch(error => {\n            console.log(error);\n        })\n\n        event.target.reset();\n\n    }\n\n    taskChangeVideo = (videoId, _videoSrc) => {\n        this.props.history.push('/game/' + videoId)\n    }\n\n    taskShareVideo = () => {\n\n        this.setState({\n            videoShare: true\n        })\n    }\n\n    taskEnableVideoPost = (friend) => {\n        this.setState({\n            videoSharePost: true,\n            selectedFriend: friend\n        })\n    }\n\n    taskCancelVideoShare = () => {\n\n        this.setState({\n            videoShare: false,\n            videoSharePost: false\n        })\n    }\n\n    taskBackToPrevious = () => {\n        this.setState({\n            videoSharePost: false\n        })\n    }\n\n    taskFilterFriends = (event) => {\n        const {name, value} = event.target;\n        \n        \n        this.setState({\n            [name]: value\n        }, () => {\n\n            const {searchedValue, friends} = this.state;\n\n            const filteredFriends = friends.filter(friend => {\n\n                const friendName = friend.friendName.toLowerCase();\n                const searched = searchedValue.toLowerCase();\n\n                if(friendName.includes(searched)){\n                    return true;\n                }\n    \n                return false;\n            })\n\n            this.setState({\n                filteredFriends: filteredFriends\n            })\n        })\n\n        \n\n       \n    }\n\n    taskSubmitSharePost = (event) => {\n        \n        event.preventDefault();\n\n        const token = sessionStorage.getItem(\"token\");\n\n        const commentText = event.target.post.value;\n        const {currentEvent, selectedFriend} = this.state;\n\n        const VideoPostData = {\n            userId: selectedFriend.friendId,\n            commentText,\n            contentType: \"video\",\n            idEvent: currentEvent.idEvent,\n            strEvent: currentEvent.strEvent,\n            intHomeScore: currentEvent.intHomeScore,\n            intAwayScore: currentEvent.intAwayScore,\n            strVideo: currentEvent.strVideo\n        }\n\n        axios.post(localUrl + \"/feed\", VideoPostData, {headers: {Authorization: `Bearer ${token}`}})\n        .then(_response => {\n\n            event.target.reset();\n\n            const {friends} = this.state;\n\n            this.setState({\n                videoShare: false,\n                videoSharePost: false,\n                filteredFriends: friends,\n                selectedFriend: {},\n                searchedValue: \"\"\n            })\n        })\n\n    }\n\n    render () {\n\n        const {strVideo, currentEvent, pastLeagueEvents, \n            videoComments, currentUser, videoShare, videoSharePost, \n            searchedValue, filteredFriends, selectedFriend} = this.state;\n\n        return (\n            <main className=\"game\">\n                <VideoMain \n                    className=\"game__video\"\n                    videoSrc={strVideo}\n                    videoName={currentEvent.strFilename}\n                />\n                <section className=\"game__info\">\n                    <div className=\"game__info-wrapper\">\n                        <VideoInfo \n                            className=\"game__video-info\" \n                            currentEvent={currentEvent}\n                            currentUser={currentUser}\n                            comments={videoComments}\n                            taskSubmitComment={this.taskSubmitComment}\n                            taskShareVideo={this.taskShareVideo}\n                        />\n                        <div className=\"game__side-videos-container\">\n                            {pastLeagueEvents.map(event => {\n                                return(\n                                    <VideoBox \n                                        key={event.idEvent}\n                                        className=\"game__side-video\"\n                                        videoSrc={event.strVideo} \n                                        videoName={event.strFilename}\n                                        videoId={event.idEvent}\n                                        onClick={this.taskChangeVideo}\n                                    />)\n                            })}\n                        </div>\n                    </div>\n                </section>\n                {videoShare && \n                    <ContentShare \n                        className=\"game__videoshare\"\n                        currentUser={currentUser}\n                        taskCancelContentShare={this.taskCancelVideoShare}\n                        taskFilterFriends={this.taskFilterFriends}\n                        taskBackToPrevious={this.taskBackToPrevious}\n                        taskEnableVideoPost={this.taskEnableVideoPost}\n                        taskSubmitSharePost={this.taskSubmitSharePost}\n                        videoSharePost={videoSharePost}\n                        searchedValue={searchedValue}\n                        friends={filteredFriends}\n                        selectedFriend={selectedFriend}\n                    />\n                }  \n            </main>\n        )\n    }\n}\n\nexport default GamePage;"]},"metadata":{},"sourceType":"module"}